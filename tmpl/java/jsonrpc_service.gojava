package {{ .Namespace }};

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.util.ArrayList;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
{{ $js := . -}}

public class {{ .Service.Name}}Service {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private {{ .Service.Name}}Service() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }
{{ range $k, $method := $.Service.Methods }}
    public RpcRequest {{ $method.Name }}({{ $method | $js.BaseJava.AssembleParams }}) {
        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(),
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    {{- if $method.ReturnType }}
                    try {
                        {{ $method.ReturnType | $js.BaseJava.ObjectTypecast }} result;

                        {{- if eq $method.ReturnType.Name "string" }}
                        result = BaseModule.fromJSON(response, String.class);
                        {{- else if eq $method.ReturnType.Name "bool" }}
                        result = BaseModule.fromJSON(response, Boolean.class);
                        {{- else if eq $method.ReturnType.Name "i16" }}
                        result = BaseModule.fromJSON(response, Short.class);
                        {{- else if eq $method.ReturnType.Name "i32" }}
                        result = BaseModule.fromJSON(response, Integer.class);
                        {{- else if eq $method.ReturnType.Name "i64" }}
                        result = BaseModule.fromJSON(response, Long.class);
                        {{- else if eq $method.ReturnType.Name "double" }}
                        result = BaseModule.fromJSON(response, Double.class);
                        {{- else if or (eq $method.ReturnType.Name "set") (eq $method.ReturnType.Name "list") }}
                        result = BaseModule.fromJSONArray(response, {{ $method.ReturnType | $js.BaseJava.GetInnerType }}.class);
                        {{- else if eq $method.ReturnType.Name "map" }}
                        <!-- map is ignored -->
                        {{- else }}
                        result = BaseModule.fromJSON(response, {{ $method.ReturnType | $js.BaseJava.GetInnerType }}.class);
                        {{- end }}

                        listener.onResponse(result);
                    } catch (Exception ex) {
                         
                        // Log.d("ex", ex.toString());
                        // Log.d("jsonObject", response);
                         
                        listener.onResponse(null);
                    }
                    {{- else -}}
                    if (listener != null) {
                        listener.onResponse(null);
                    }
                    {{- end }}
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                listener.onResponse(null);
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<>();
{{- range $arg := $method.Arguments }}
                params.add({{ $js.FilterVariableName $arg.Name }});
{{- end }}

                HashMap<String, Object> msg = new HashMap<>();
                msg.put("id", getMsgID());
                msg.put("method", "{{ $js.Service.Name }}.{{ $method.Name }}");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        TRpc.getQueue().add(req);
        return req;
    }
{{ end -}}
}
