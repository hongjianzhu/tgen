package com.daigou.sg.rpc.shipforme;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */

import android.util.Log;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.selfstation.utils.JsonUtils;
import com.daigou.selfstation.utils.NetworkError;
import com.daigou.selfstation.utils.RpcRequest;
import com.daigou.selfstation.system.AppUrl;
import com.fasterxml.jackson.core.JsonParser;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;

public class ShipfForMeService {
    private static final Gson gson = new Gson();
    private static int msgID = 1;
    private static RequestQueue queue;

    private ShipfForMeService() {
        // Constructor hidden because this is a singleton
    }

    public static void init(RequestQueue requestQueue) {
        queue = requestQueue;
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static void GetCourierCompaniesByRegion(final String originCode, final Listener<ArrayList<String>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/GetCourierCompaniesByRegion",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<String> result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = JsonUtils.readStringList(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("originCode", originCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserAddNewShipForMeOrder(final String warehouseCode, final String shipperName, final String wayBill, final String alternative, final boolean takePhoto, final String originCode, final String repack, final Listener<Integer> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserAddNewShipForMeOrder",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        Integer result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        jp.nextToken();
                        result = jp.getIntValue();

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("warehouseCode", warehouseCode);
                msg.put("shipperName", shipperName);
                msg.put("wayBill", wayBill);
                msg.put("alternative", alternative);
                msg.put("takePhoto", takePhoto);
                msg.put("originCode", originCode);
                msg.put("repack", repack);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserConfirmShipForMeRepack(final boolean confirm, final int orderId, final Listener<Void> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserConfirmShipForMeRepack",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {if (listener != null) {
                        listener.onResponse(true);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("confirm", confirm);
                msg.put("orderId", orderId);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserDeleteShipForMeOrder(final int orderId, final Listener<Void> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserDeleteShipForMeOrder",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {if (listener != null) {
                        listener.onResponse(true);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderId", orderId);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserGetShipForMeAddressByRegion(final String originCode, final Listener<ArrayList<TShipformeAddress>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserGetShipForMeAddressByRegion",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<TShipformeAddress> result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TShipformeAddress.fromJSONArray(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("originCode", originCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserGetShipForMeHomeSummary(final Listener<TShipForMeOrderHomeSummary> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserGetShipForMeHomeSummary",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TShipForMeOrderHomeSummary result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TShipForMeOrderHomeSummary.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                return "".getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserGetShipForMeOrderDetailByOrderId(final int orderId, final Listener<TShipForMeOrder> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserGetShipForMeOrderDetailByOrderId",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TShipForMeOrder result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TShipForMeOrder.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderId", orderId);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserGetShipForMeOrderFeeByOrderIds(final ArrayList<String> orderIds, final boolean insured, final String deliveryMethod, final String shipmentTypeCode, final int customerAddressId, final String originCode, final String warehouseCode, final String couponCode, final Listener<TShipformeOrderBill> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserGetShipForMeOrderFeeByOrderIds",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TShipformeOrderBill result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TShipformeOrderBill.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderIds", orderIds);
                msg.put("insured", insured);
                msg.put("deliveryMethod", deliveryMethod);
                msg.put("shipmentTypeCode", shipmentTypeCode);
                msg.put("customerAddressId", customerAddressId);
                msg.put("originCode", originCode);
                msg.put("warehouseCode", warehouseCode);
                msg.put("couponCode", couponCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserGetShipForMeOrderListByStatus(final String originCode, final String warehouseCode, final String status, final int offset, final int limit, final Listener<ArrayList<TShipForMeOrder>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserGetShipForMeOrderListByStatus",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<TShipForMeOrder> result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TShipForMeOrder.fromJSONArray(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("originCode", originCode);
                msg.put("warehouseCode", warehouseCode);
                msg.put("status", status);
                msg.put("offset", offset);
                msg.put("limit", limit);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserGetShipForMeSummary(final String originCode, final Listener<TShipForMeOrderSummary> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserGetShipForMeSummary",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TShipForMeOrderSummary result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TShipForMeOrderSummary.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("originCode", originCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserPackShipForMeOrder(final ArrayList<String> orderIds, final boolean insured, final String deliveryMethod, final String shipmentTypeCode, final int customerAddressId, final String originCode, final String warehouseCode, final String couponCode, final Listener<Integer> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserPackShipForMeOrder",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        Integer result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        jp.nextToken();
                        result = jp.getIntValue();

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderIds", orderIds);
                msg.put("insured", insured);
                msg.put("deliveryMethod", deliveryMethod);
                msg.put("shipmentTypeCode", shipmentTypeCode);
                msg.put("customerAddressId", customerAddressId);
                msg.put("originCode", originCode);
                msg.put("warehouseCode", warehouseCode);
                msg.put("couponCode", couponCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserSaveShipForMeOrderPrice(final String orderIds, final double price, final Listener<Void> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserSaveShipForMeOrderPrice",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {if (listener != null) {
                        listener.onResponse(true);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderIds", orderIds);
                msg.put("price", price);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserSendToTelephone(final String phoneNumber, final Listener<Boolean> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserSendToTelephone",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        Boolean result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        jp.nextToken();
                        result = jp.getBooleanValue();

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("phoneNumber", phoneNumber);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserUpdateShipForMeOrder(final int orderId, final String warehouseCode, final String shipperName, final String wayBill, final String alternative, final boolean takePhoto, final String repack, final Listener<Void> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserUpdateShipForMeOrder",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {if (listener != null) {
                        listener.onResponse(true);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderId", orderId);
                msg.put("warehouseCode", warehouseCode);
                msg.put("shipperName", shipperName);
                msg.put("wayBill", wayBill);
                msg.put("alternative", alternative);
                msg.put("takePhoto", takePhoto);
                msg.put("repack", repack);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserValidationPhone(final String phoneNumber, final String validationCode, final Listener<Boolean> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "ShipfForMe/UserValidationPhone",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        Boolean result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        jp.nextToken();
                        result = jp.getBooleanValue();

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("phoneNumber", phoneNumber);
                msg.put("validationCode", validationCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }
}
