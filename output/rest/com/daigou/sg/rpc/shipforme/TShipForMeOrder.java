package com.daigou.sg.rpc.shipforme;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */

public class TShipForMeOrder implements Serializable {
    public int id;
    public String orderNumber;
    public String shipperName;
    public String wayBill;
    public String alternative;
    public String warehouseCode;
    public int arrivedDays;
    public double weight;
    public double volumeWeight;
    public double unitPrice;
    public boolean hasPhotoService;
    public boolean hasRepackService;
    public boolean hasOtherService;
    public boolean isProcessing;
    public ArrayList<TVendorName> vendorNames;
    public String correctVendorName;
    public double valueAddedCharge;
    public String orderStatus;
    public String attachments;
    public String valueAddedService;
    public String repackService;
    public ArrayList<TOrderRemark> remarks;

    static TShipForMeOrder fromJSON(JsonParser jp) throws IOException {
        // Sanity check: verify that we got "Json Object":
        if (jp.nextToken() != JsonToken.START_OBJECT) {
            throw new IOException("Expected data to start with a TShipForMeOrder Object");
        }

        return doFromJSON(jp);
    }

    private static TShipForMeOrder doFromJSON(JsonParser jp) throws IOException {
        TShipForMeOrder result = new TShipForMeOrder();

        // Iterate over object fields:
        while (jp.nextToken() != JsonToken.END_OBJECT) {
            String fieldName = jp.getCurrentName();

            if (false) {
            } else if (fieldName.equals("id")) {
                jp.nextToken();
                result.id = jp.getIntValue();
            } else if (fieldName.equals("orderNumber")) {
                jp.nextToken();
                result.orderNumber = jp.getText();
            } else if (fieldName.equals("shipperName")) {
                jp.nextToken();
                result.shipperName = jp.getText();
            } else if (fieldName.equals("wayBill")) {
                jp.nextToken();
                result.wayBill = jp.getText();
            } else if (fieldName.equals("alternative")) {
                jp.nextToken();
                result.alternative = jp.getText();
            } else if (fieldName.equals("warehouseCode")) {
                jp.nextToken();
                result.warehouseCode = jp.getText();
            } else if (fieldName.equals("arrivedDays")) {
                jp.nextToken();
                result.arrivedDays = jp.getIntValue();
            } else if (fieldName.equals("weight")) {
                jp.nextToken();
                result.weight = jp.getDoubleValue();
            } else if (fieldName.equals("volumeWeight")) {
                jp.nextToken();
                result.volumeWeight = jp.getDoubleValue();
            } else if (fieldName.equals("unitPrice")) {
                jp.nextToken();
                result.unitPrice = jp.getDoubleValue();
            } else if (fieldName.equals("hasPhotoService")) {
                jp.nextToken();
                result.hasPhotoService = jp.getBooleanValue();
            } else if (fieldName.equals("hasRepackService")) {
                jp.nextToken();
                result.hasRepackService = jp.getBooleanValue();
            } else if (fieldName.equals("hasOtherService")) {
                jp.nextToken();
                result.hasOtherService = jp.getBooleanValue();
            } else if (fieldName.equals("isProcessing")) {
                jp.nextToken();
                result.isProcessing = jp.getBooleanValue();
            } else if (fieldName.equals("vendorNames")) {
                result.vendorNames = TVendorName.fromJSONArray(jp);
            } else if (fieldName.equals("correctVendorName")) {
                jp.nextToken();
                result.correctVendorName = jp.getText();
            } else if (fieldName.equals("valueAddedCharge")) {
                jp.nextToken();
                result.valueAddedCharge = jp.getDoubleValue();
            } else if (fieldName.equals("orderStatus")) {
                jp.nextToken();
                result.orderStatus = jp.getText();
            } else if (fieldName.equals("attachments")) {
                jp.nextToken();
                result.attachments = jp.getText();
            } else if (fieldName.equals("valueAddedService")) {
                jp.nextToken();
                result.valueAddedService = jp.getText();
            } else if (fieldName.equals("repackService")) {
                jp.nextToken();
                result.repackService = jp.getText();
            } else if (fieldName.equals("remarks")) {
                result.remarks = TOrderRemark.fromJSONArray(jp);
            }
        }
        return result;
    }

    static ArrayList<TShipForMeOrder> fromJSONArray(JsonParser jp) throws IOException {
        if (jp.nextToken() != JsonToken.START_ARRAY) {
            throw new IOException("Expected data to start with a TShipForMeOrder array");
        }

        ArrayList<TShipForMeOrder> result = new ArrayList<TShipForMeOrder>();

        // Iterate over object fields:
        while (jp.nextToken() != JsonToken.END_ARRAY) {
            result.add(doFromJSON(jp));
        }
        return result;
    }
}
