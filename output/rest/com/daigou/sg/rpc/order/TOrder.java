package com.daigou.sg.rpc.order;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */

public class TOrder implements Serializable {
    public int id;
    public String orderNumber;
    public String productImage;
    public String productName;
    public boolean gstFee;
    public boolean insured;
    public String sellerDiscount;
    public int packageId;

    static TOrder fromJSON(JsonParser jp) throws IOException {
        // Sanity check: verify that we got "Json Object":
        if (jp.nextToken() != JsonToken.START_OBJECT) {
            throw new IOException("Expected data to start with a TOrder Object");
        }

        return doFromJSON(jp);
    }

    private static TOrder doFromJSON(JsonParser jp) throws IOException {
        TOrder result = new TOrder();

        // Iterate over object fields:
        while (jp.nextToken() != JsonToken.END_OBJECT) {
            String fieldName = jp.getCurrentName();

            if (false) {
            } else if (fieldName.equals("id")) {
                jp.nextToken();
                result.id = jp.getIntValue();
            } else if (fieldName.equals("orderNumber")) {
                jp.nextToken();
                result.orderNumber = jp.getText();
            } else if (fieldName.equals("productImage")) {
                jp.nextToken();
                result.productImage = jp.getText();
            } else if (fieldName.equals("productName")) {
                jp.nextToken();
                result.productName = jp.getText();
            } else if (fieldName.equals("gstFee")) {
                jp.nextToken();
                result.gstFee = jp.getBooleanValue();
            } else if (fieldName.equals("insured")) {
                jp.nextToken();
                result.insured = jp.getBooleanValue();
            } else if (fieldName.equals("sellerDiscount")) {
                jp.nextToken();
                result.sellerDiscount = jp.getText();
            } else if (fieldName.equals("packageId")) {
                jp.nextToken();
                result.packageId = jp.getIntValue();
            }
        }
        return result;
    }

    static ArrayList<TOrder> fromJSONArray(JsonParser jp) throws IOException {
        if (jp.nextToken() != JsonToken.START_ARRAY) {
            throw new IOException("Expected data to start with a TOrder array");
        }

        ArrayList<TOrder> result = new ArrayList<TOrder>();

        // Iterate over object fields:
        while (jp.nextToken() != JsonToken.END_ARRAY) {
            result.add(doFromJSON(jp));
        }
        return result;
    }
}
