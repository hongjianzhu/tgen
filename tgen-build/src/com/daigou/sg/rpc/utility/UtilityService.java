package com.daigou.sg.rpc.utility;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class UtilityService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private UtilityService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest GetAllBanks(final Listener<java.util.ArrayList<TTopUpBank>> listener) {
        RpcResponse res = new RpcResponse(TTopUpBank.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.GetAllBanks");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetBasicInfo(final Listener<TBasicInfo> listener) {
        RpcResponse res = new RpcResponse(TBasicInfo.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.GetBasicInfo");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetDiscountTypes(final Listener<java.util.ArrayList<TDiscountType>> listener) {
        RpcResponse res = new RpcResponse(TDiscountType.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.GetDiscountTypes");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetExchangeRate(final Listener<java.util.ArrayList<TExchangeRate>> listener) {
        RpcResponse res = new RpcResponse(TExchangeRate.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.GetExchangeRate");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetGuidePage(final String screenVersion, final Listener<TGuidePage> listener) {
        RpcResponse res = new RpcResponse(TGuidePage.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(screenVersion);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.GetGuidePage");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetInternalShipmentFee(final String productUrl, final String originCode, final Listener<java.util.ArrayList<TShippingFee>> listener) {
        RpcResponse res = new RpcResponse(TShippingFee.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(productUrl);
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.GetInternalShipmentFee");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetPromotionAdList(final String moduleName, final String originCode, final Listener<java.util.ArrayList<TPromotionAd>> listener) {
        RpcResponse res = new RpcResponse(TPromotionAd.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(moduleName);
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.GetPromotionAdList");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetShippingMethod(final Listener<java.util.ArrayList<TShipmentType>> listener) {
        RpcResponse res = new RpcResponse(TShipmentType.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.GetShippingMethod");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetUserUploadToken(final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.GetUserUploadToken");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetWarehouse(final Listener<java.util.ArrayList<TWarehouse>> listener) {
        RpcResponse res = new RpcResponse(TWarehouse.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.GetWarehouse");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest KonotorIsAvailable(final String countryAbbreviation, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(countryAbbreviation);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.KonotorIsAvailable");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest TemporaryIntroductionIncludingUSContent(final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Utility.TemporaryIntroductionIncludingUSContent");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
