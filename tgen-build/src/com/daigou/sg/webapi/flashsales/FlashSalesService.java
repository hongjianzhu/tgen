package com.daigou.sg.webapi.flashsales;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.nio.charset.Charset;

public class FlashSalesService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private FlashSalesService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest GetFlashSalesList(final int offset, final int limit, final String area, final Listener<TFlashSalesSummary> listener) {
        RpcResponse res = new RpcResponse(TFlashSalesSummary.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("offset", offset);
        
        args.put("limit", limit);
        
        args.put("area", area);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/GetFlashSalesList", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetFlashSalesListByDate(final String date, final int top, final String area, final Listener<java.util.ArrayList<TFlashSalesSummary>> listener) {
        RpcResponse res = new RpcResponse(TFlashSalesSummary.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("date", date);
        
        args.put("top", top);
        
        args.put("area", area);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/GetFlashSalesListByDate", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetFlashSalesListById(final String settingId, final int offset, final int limit, final String area, final Listener<TFlashSalesSummary> listener) {
        RpcResponse res = new RpcResponse(TFlashSalesSummary.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("settingId", settingId);
        
        args.put("offset", offset);
        
        args.put("limit", limit);
        
        args.put("area", area);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/GetFlashSalesListById", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest SyncFlashSales(final String settingId, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("settingId", settingId);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/SyncFlashSales", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserAddFlashSalesProduct(final String settingId, final TFlashSalesProduct product, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("settingId", settingId);
        
        args.put("product", product);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/UserAddFlashSalesProduct", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserAddFlashSalesSetting(final TFlashSalesSetting setting, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("setting", setting);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/UserAddFlashSalesSetting", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserDeleteFlashSalesProduct(final String settingId, final String productUrl, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("settingId", settingId);
        
        args.put("productUrl", productUrl);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/UserDeleteFlashSalesProduct", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserDeleteFlashSalesSetting(final String settingId, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("settingId", settingId);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/UserDeleteFlashSalesSetting", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetFlashSalesListAdmin(final String settingId, final int offset, final int limit, final Listener<java.util.ArrayList<TFlashSalesProduct>> listener) {
        RpcResponse res = new RpcResponse(TFlashSalesProduct.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("settingId", settingId);
        
        args.put("offset", offset);
        
        args.put("limit", limit);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/UserGetFlashSalesListAdmin", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetFlashSalesSettingsListAdmin(final int offset, final int limit, final Listener<java.util.ArrayList<TFlashSalesSetting>> listener) {
        RpcResponse res = new RpcResponse(TFlashSalesSetting.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("offset", offset);
        
        args.put("limit", limit);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/UserGetFlashSalesSettingsListAdmin", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserUpdateFlashSalesProduct(final String settingId, final TFlashSalesProduct product, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("settingId", settingId);
        
        args.put("product", product);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/UserUpdateFlashSalesProduct", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserUpdateFlashSalesSetting(final TFlashSalesSetting setting, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("setting", setting);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "FlashSales/UserUpdateFlashSalesSetting", res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
