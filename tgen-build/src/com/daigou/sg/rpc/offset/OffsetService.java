package com.daigou.sg.rpc.offset;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class OffsetService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private OffsetService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest UserAgreeOrderOffset(final int orderId, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(orderId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Offset.UserAgreeOrderOffset");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserAgreePackageOffset(final int packageId, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(packageId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Offset.UserAgreePackageOffset");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetUnconfirmedOrderOffsets(final int orderId, final Listener<TOrderOffset> listener) {
        RpcResponse res = new RpcResponse(TOrderOffset.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(orderId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Offset.UserGetUnconfirmedOrderOffsets");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserReplyOrderOffset(final int orderId, final String remark, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(orderId);
        params.add(remark);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Offset.UserReplyOrderOffset");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
