package com.daigou.sg.rpc.payment;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class PaymentService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private PaymentService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest AddWithdrawReqeust(final String bankName, final String account, final double amount, final String reason, final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(bankName);
        params.add(account);
        params.add(amount);
        params.add(reason);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.AddWithdrawReqeust");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest ConfirmPayments(final java.util.ArrayList<Integer> paymentIds, final Listener<Double> listener) {
        RpcResponse res = new RpcResponse(Double.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(paymentIds);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.ConfirmPayments");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetCreditCardFee(final Listener<TCreditCardInfo> listener) {
        RpcResponse res = new RpcResponse(TCreditCardInfo.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.GetCreditCardFee");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetPaymentDetail(final int paymentId, final Listener<TPaymentBillDetail> listener) {
        RpcResponse res = new RpcResponse(TPaymentBillDetail.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(paymentId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.GetPaymentDetail");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetPaymentListByStatus(final String status, final int offset, final int limit, final Listener<java.util.ArrayList<TPaymentBillSummary>> listener) {
        RpcResponse res = new RpcResponse(TPaymentBillSummary.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(status);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.GetPaymentListByStatus");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetPaymentSummary(final Listener<TPaymentSummary> listener) {
        RpcResponse res = new RpcResponse(TPaymentSummary.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.GetPaymentSummary");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetPrepayBalance(final Listener<Double> listener) {
        RpcResponse res = new RpcResponse(Double.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.GetPrepayBalance");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetPrimePaymentSetting(final Listener<java.util.ArrayList<TPrimePaymentSetting>> listener) {
        RpcResponse res = new RpcResponse(TPrimePaymentSetting.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.GetPrimePaymentSetting");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetPrimePaymentSettingWithDiscount(final String identId, final Listener<java.util.ArrayList<TPrimePaymentSetting>> listener) {
        RpcResponse res = new RpcResponse(TPrimePaymentSetting.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(identId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.GetPrimePaymentSettingWithDiscount");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetTopUpDescription(final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.GetTopUpDescription");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetWithdrawBanks(final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.GetWithdrawBanks");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest TopUp(final String transactionNumber, final String bankName, final String telephone, final double amount, final String paymentMethod, final java.util.ArrayList<Integer> paymentIds, final String payDate, final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(transactionNumber);
        params.add(bankName);
        params.add(telephone);
        params.add(amount);
        params.add(paymentMethod);
        params.add(paymentIds);
        params.add(payDate);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.TopUp");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserDoCreditCardTopUp(final double total, final double creditCardFee, final java.util.ArrayList<String> paymentIds, final String telephone, final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(total);
        params.add(creditCardFee);
        params.add(paymentIds);
        params.add(telephone);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.UserDoCreditCardTopUp");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetPrimePaymentSummary(final Listener<TPrimePaymentSummary> listener) {
        RpcResponse res = new RpcResponse(TPrimePaymentSummary.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.UserGetPrimePaymentSummary");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserPayParcelPayment(final java.util.ArrayList<Integer> paymentBillIds, final Listener<TPayParcelPaymentResult> listener) {
        RpcResponse res = new RpcResponse(TPayParcelPaymentResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(paymentBillIds);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.UserPayParcelPayment");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserPayPrimePayment(final String primeType, final Listener<TPrimePaymentResult> listener) {
        RpcResponse res = new RpcResponse(TPrimePaymentResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(primeType);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.UserPayPrimePayment");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserPayPrimePaymentWithDiscount(final String primeType, final String identId, final Listener<TPrimePaymentResult> listener) {
        RpcResponse res = new RpcResponse(TPrimePaymentResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(primeType);
        params.add(identId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.UserPayPrimePaymentWithDiscount");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserRenewPrime(final Listener<TPrimePaymentResult> listener) {
        RpcResponse res = new RpcResponse(TPrimePaymentResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Payment.UserRenewPrime");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
