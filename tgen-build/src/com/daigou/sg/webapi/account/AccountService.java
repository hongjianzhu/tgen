package com.daigou.sg.webapi.account;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.nio.charset.Charset;

public class AccountService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private AccountService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest ForgetPassword(final String area, final String emailOrUserId, final Listener<TForgetPasswordInfo> listener) {
        RpcResponse res = new RpcResponse(TForgetPasswordInfo.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("area", area);
        
        args.put("emailOrUserId", emailOrUserId);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/ForgetPassword", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest Login(final String area, final String userNameOrEmail, final String password, final String platform, final String deviceToken, final String UDID, final String deviceInfo, final Listener<TLoginInfo> listener) {
        RpcResponse res = new RpcResponse(TLoginInfo.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("area", area);
        
        args.put("userNameOrEmail", userNameOrEmail);
        
        args.put("password", password);
        
        args.put("platform", platform);
        
        args.put("deviceToken", deviceToken);
        
        args.put("UDID", UDID);
        
        args.put("deviceInfo", deviceInfo);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/Login", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest OauthBind(final String area, final String userType, final String email, final String password, final String accessToken, final String userId, final String platform, final String deviceToken, final String UDID, final String deviceInfo, final Listener<TLoginInfo> listener) {
        RpcResponse res = new RpcResponse(TLoginInfo.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("area", area);
        
        args.put("userType", userType);
        
        args.put("email", email);
        
        args.put("password", password);
        
        args.put("accessToken", accessToken);
        
        args.put("userId", userId);
        
        args.put("platform", platform);
        
        args.put("deviceToken", deviceToken);
        
        args.put("UDID", UDID);
        
        args.put("deviceInfo", deviceInfo);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/OauthBind", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest OauthLogin(final String area, final String userType, final String email, final String accessToken, final String userId, final String platform, final String deviceToken, final String UDID, final String deviceInfo, final Listener<TLoginInfo> listener) {
        RpcResponse res = new RpcResponse(TLoginInfo.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("area", area);
        
        args.put("userType", userType);
        
        args.put("email", email);
        
        args.put("accessToken", accessToken);
        
        args.put("userId", userId);
        
        args.put("platform", platform);
        
        args.put("deviceToken", deviceToken);
        
        args.put("UDID", UDID);
        
        args.put("deviceInfo", deviceInfo);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/OauthLogin", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest OauthLoginV2(final TOauthLoginV2Params oauthParams, final Listener<TLoginInfo> listener) {
        RpcResponse res = new RpcResponse(TLoginInfo.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("oauthParams", oauthParams);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/OauthLoginV2", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest OauthLoginWithTelephone(final TOauthLoginWithTelephoneParams oauthParamsWithPhone, final Listener<TLoginInfo> listener) {
        RpcResponse res = new RpcResponse(TLoginInfo.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("oauthParamsWithPhone", oauthParamsWithPhone);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/OauthLoginWithTelephone", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest OauthMutualBind(final String area, final String oldUserType, final String oldAccessToken, final String oldUserId, final String newUserType, final String newAccessToken, final String newUserId, final String platform, final String deviceToken, final String UDID, final String deviceInfo, final Listener<TLoginInfo> listener) {
        RpcResponse res = new RpcResponse(TLoginInfo.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("area", area);
        
        args.put("oldUserType", oldUserType);
        
        args.put("oldAccessToken", oldAccessToken);
        
        args.put("oldUserId", oldUserId);
        
        args.put("newUserType", newUserType);
        
        args.put("newAccessToken", newAccessToken);
        
        args.put("newUserId", newUserId);
        
        args.put("platform", platform);
        
        args.put("deviceToken", deviceToken);
        
        args.put("UDID", UDID);
        
        args.put("deviceInfo", deviceInfo);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/OauthMutualBind", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest PreRegister(final String area, final String email, final String password, final String userName, final String platform, final Listener<TResult> listener) {
        RpcResponse res = new RpcResponse(TResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("area", area);
        
        args.put("email", email);
        
        args.put("password", password);
        
        args.put("userName", userName);
        
        args.put("platform", platform);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/PreRegister", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest Register(final String area, final String email, final String password, final String userName, final String platform, final Listener<TResult> listener) {
        RpcResponse res = new RpcResponse(TResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("area", area);
        
        args.put("email", email);
        
        args.put("password", password);
        
        args.put("userName", userName);
        
        args.put("platform", platform);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/Register", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest RegisterWithTelephone(final String area, final String email, final String password, final String userName, final String platform, final String telephone, final String verificationCode, final Listener<TResult> listener) {
        RpcResponse res = new RpcResponse(TResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("area", area);
        
        args.put("email", email);
        
        args.put("password", password);
        
        args.put("userName", userName);
        
        args.put("platform", platform);
        
        args.put("telephone", telephone);
        
        args.put("verificationCode", verificationCode);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/RegisterWithTelephone", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest SendPhoneVerificationCode(final String area, final String phone, final Listener<TResult> listener) {
        RpcResponse res = new RpcResponse(TResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("area", area);
        
        args.put("phone", phone);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Account/SendPhoneVerificationCode", res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
