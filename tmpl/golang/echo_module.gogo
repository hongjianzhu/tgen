{{define "echo_module"}}package {{.Package}}{{$utils := .TplUtils}}{{$serviceName := $utils.UpperHead .Service.Name}}

import (
    "encoding/json"
    "fmt"
    "net/http"

    "github.com/labstack/echo"
)

func Register{{$serviceName}}ServiceAPIModule(mux *echo.Group, service {{$serviceName}}Service) {
    mod := &{{$serviceName}}ServiceAPIModule{
        service: service,
    }

    group := mux.Group("/{{$serviceName}}")
    {{- range $method := .Service.Methods}}
    group.Post("/{{$utils.UpperHead $method.Name}}", mod.{{$utils.UpperHead $method.Name}})
    {{- end}}
}

type {{$serviceName}}ServiceAPIModule struct {
    service {{$serviceName}}Service
}

{{range $method := .Service.Methods}}{{$methodName := $utils.UpperHead $method.Name}}
func (this *{{$serviceName}}ServiceAPIModule) {{$methodName}}(c *echo.Context) error {
    {{- $argsCount := len $method.Arguments}}
    {{- if ne $argsCount 0}}
    params := &Request{{$serviceName}}Service{{$methodName}}Arguments{}

    decoder := json.NewDecoder(c.Request().Body)
    if err := decoder.Decode(params); err != nil {
        fmt.Printf("/{{$serviceName}}/{{$methodName}}: invalid request body %s\n", err)
        return echo.NewHTTPError(http.StatusBadRequest, "invalid request")
    }
    {{end}}
    {{- $noReturn := $utils.IsNilType $method.ReturnType}}
    {{if not $noReturn}}result, {{end}}err := this.service.{{$methodName}}({{$utils.GenWebApiServiceParams $method.Arguments}})
    
    if err != nil {
        fmt.Printf("/{{$serviceName}}/{{$methodName}}: %s", err)
        return echo.NewHTTPError(http.StatusInternalServerError, "internal error")
    }

    return c.JSON(http.StatusOK, {{if not $noReturn}}result{{else}}"ok"{{end}})
}
{{end}}
{{end}}
