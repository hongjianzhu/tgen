package com.daigou.selfstation.rpc.selfstation;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */

import android.util.Log;

import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.common.utils.JsonUtils;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.app.AppUrl;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
public class SelfStationService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private SelfStationService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public RpcRequest Login(final String username, final String tPackage, final Listener<TLoginResult> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl,
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TLoginResult result;
                        result = BaseModule.fromJSON(response, new TLoginResult.getTClass());

                        listener.onResponse(result);
                    } catch (Exception ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                listener.onResponse(null);
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<>();
                params.add(username);
                params.add(tPackage);

                HashMap<String, Object> msg = new HashMap<>();
                msg.put("id", getMsgID());
                msg.put("method", "SelfStation.Login");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        TRpc.getQueue().add(req);
    }

    public RpcRequest UserFindParcel(final String stationName, final String date, final String userName, final String phone, final String parcelNumber, final int offset, final int limit, final Listener<ArrayList<TParcel>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl,
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<TParcel> result;
                        result = BaseModule.fromJSONArray(response, new TParcel.getTClass());

                        listener.onResponse(result);
                    } catch (Exception ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                listener.onResponse(null);
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<>();
                params.add(stationName);
                params.add(date);
                params.add(userName);
                params.add(phone);
                params.add(parcelNumber);
                params.add(offset);
                params.add(limit);

                HashMap<String, Object> msg = new HashMap<>();
                msg.put("id", getMsgID());
                msg.put("method", "SelfStation.UserFindParcel");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        TRpc.getQueue().add(req);
    }

    public RpcRequest UserGetParcel(final String parcelNumber, final Listener<TParcel> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl,
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TParcel result;
                        result = BaseModule.fromJSON(response, new TParcel.getTClass());

                        listener.onResponse(result);
                    } catch (Exception ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                listener.onResponse(null);
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<>();
                params.add(parcelNumber);

                HashMap<String, Object> msg = new HashMap<>();
                msg.put("id", getMsgID());
                msg.put("method", "SelfStation.UserGetParcel");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        TRpc.getQueue().add(req);
    }

    public RpcRequest UserGetShelfNumbers(final String stationName, final Listener<ArrayList<String>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl,
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<String> result;
                        result = BaseModule.fromJSONArray(response, new String.getTClass());

                        listener.onResponse(result);
                    } catch (Exception ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                listener.onResponse(null);
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<>();
                params.add(stationName);

                HashMap<String, Object> msg = new HashMap<>();
                msg.put("id", getMsgID());
                msg.put("method", "SelfStation.UserGetShelfNumbers");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        TRpc.getQueue().add(req);
    }

    public RpcRequest UserGetUploadToken(final Listener<String> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl,
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        String result;
                        result = BaseModule.fromJSON(response, String.class);

                        listener.onResponse(result);
                    } catch (Exception ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                listener.onResponse(null);
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<>();

                HashMap<String, Object> msg = new HashMap<>();
                msg.put("id", getMsgID());
                msg.put("method", "SelfStation.UserGetUploadToken");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        TRpc.getQueue().add(req);
    }

    public RpcRequest UserListParcel(final String stationName, final String status, final int offset, final int limit, final Listener<ArrayList<TParcel>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl,
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<TParcel> result;
                        result = BaseModule.fromJSONArray(response, new TParcel.getTClass());

                        listener.onResponse(result);
                    } catch (Exception ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                listener.onResponse(null);
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<>();
                params.add(stationName);
                params.add(status);
                params.add(offset);
                params.add(limit);

                HashMap<String, Object> msg = new HashMap<>();
                msg.put("id", getMsgID());
                msg.put("method", "SelfStation.UserListParcel");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        TRpc.getQueue().add(req);
    }

    public RpcRequest UserModifyPassword(final String currentPassword, final String newPassword, final Listener<String> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl,
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        String result;
                        result = BaseModule.fromJSON(response, String.class);

                        listener.onResponse(result);
                    } catch (Exception ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                listener.onResponse(null);
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<>();
                params.add(currentPassword);
                params.add(newPassword);

                HashMap<String, Object> msg = new HashMap<>();
                msg.put("id", getMsgID());
                msg.put("method", "SelfStation.UserModifyPassword");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        TRpc.getQueue().add(req);
    }

    public RpcRequest UserPutParcelToShelf(final String shelfNumber, final String parcelNumber, final Listener<String> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl,
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        String result;
                        result = BaseModule.fromJSON(response, String.class);

                        listener.onResponse(result);
                    } catch (Exception ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                listener.onResponse(null);
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<>();
                params.add(shelfNumber);
                params.add(parcelNumber);

                HashMap<String, Object> msg = new HashMap<>();
                msg.put("id", getMsgID());
                msg.put("method", "SelfStation.UserPutParcelToShelf");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        TRpc.getQueue().add(req);
    }

    public RpcRequest UserSetParcelReceived(final String parcelNumber, final int rating, final String signatureImageKey, final Listener<String> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl,
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        String result;
                        result = BaseModule.fromJSON(response, String.class);

                        listener.onResponse(result);
                    } catch (Exception ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                listener.onResponse(null);
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<>();
                params.add(parcelNumber);
                params.add(rating);
                params.add(signatureImageKey);

                HashMap<String, Object> msg = new HashMap<>();
                msg.put("id", getMsgID());
                msg.put("method", "SelfStation.UserSetParcelReceived");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        TRpc.getQueue().add(req);
    }
}
