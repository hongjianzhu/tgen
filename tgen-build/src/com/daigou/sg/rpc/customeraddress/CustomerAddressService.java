package com.daigou.sg.rpc.customeraddress;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class CustomerAddressService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private CustomerAddressService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest GetAddressByPostCode(final String postcode, final Listener<TAddressDetail> listener) {
        RpcResponse res = new RpcResponse(TAddressDetail.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(postcode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "CustomerAddress.GetAddressByPostCode");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserAddAUNewAddress(final TAddress address, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(address);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "CustomerAddress.UserAddAUNewAddress");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserAddIDNewAddress(final TAddress address, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(address);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "CustomerAddress.UserAddIDNewAddress");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserAddMYNewAddress(final TAddress address, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(address);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "CustomerAddress.UserAddMYNewAddress");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserAddSGNewAddress(final TSGAddress address, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(address);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "CustomerAddress.UserAddSGNewAddress");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserDeleteAddress(final int addressId, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(addressId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "CustomerAddress.UserDeleteAddress");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetAddressDetail(final int addressId, final Listener<TAddressDetail> listener) {
        RpcResponse res = new RpcResponse(TAddressDetail.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(addressId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "CustomerAddress.UserGetAddressDetail");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetAddressList(final Listener<java.util.ArrayList<TAddressDetail>> listener) {
        RpcResponse res = new RpcResponse(TAddressDetail.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "CustomerAddress.UserGetAddressList");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSetDefaultAddress(final String addressId, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(addressId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "CustomerAddress.UserSetDefaultAddress");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserUpdateAddress(final int addressId, final TAddress address, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(addressId);
        params.add(address);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "CustomerAddress.UserUpdateAddress");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
