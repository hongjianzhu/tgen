{{define "struct"}}

import Foundation

class TRTemplate: EZObject {

    override var allKeys: Set<String> {
        return ["name", "count", "yesOrNo", "amount", "decimal", "anotherObject", "objects"]
    }
    
    var name: String?
    
    var count: Int = 0
    
    var yesOrNo: Bool = false
    
    var amount: Double = 0.0
    
    var decimal: Int64 = 0
    
    var anotherObject: TRAnotherObject?
    
    var objects: [TRAnotherObject]?
    
    override func fromJSON(jsonObject: AnyObject?) -> Bool {
        
        guard super.fromJSON(jsonObject) else { return false }
        
        guard let dict = jsonObject as? [String: AnyObject] else { return false }
        
        name            = dict["name"] as? String
        count           = dict["count"] as? Int ?? 0
        yesOrNo         = dict["yesOrNo"] as? Bool ?? false
        amount          = dict["amount"] as? Double ?? 0.0
        decimal         = dict["decimal"] as? Int64 ?? 0
        anotherObject   = TRAnotherObject(jsonObject: dict["anotherObject"])
        objects         = [TRAnotherObject](jsonObject: dict["objects"])
        
        return true
    }
    
    override func toJSON() -> AnyObject {
        var dict = [String: AnyObject]()
        
        dict["name"]            = name
        dict["count"]           = count
        dict["yesOrNo"]         = yesOrNo
        dict["amount"]          = amount
        dict["decimal"]         = NSNumber(longLong: decimal)
        dict["anotherObject"]   = anotherObject?.toJSON()
        dict["objects"]         = objects?.toJSON()
        
        return dict
    }
}

class TRAnotherObject: EZObject {

    override var allKeys: Set<String> {
        return ["name"]
    }
    
    var name: String?
    
    override func fromJSON(jsonObject: AnyObject?) -> Bool {
        
        guard super.fromJSON(jsonObject) else { return false }
        
        guard let dict = jsonObject as? [String: AnyObject] else { return false }
        
        name = dict["name"] as? String
        
        return true
    }
    
    override func toJSON() -> AnyObject {
        
        var dict = [String: AnyObject]()
        
        dict["name"] = name
        
        return dict
    }
}

class Example: NSObject {
    
    class func UserPostTemplate(template: TRTemplate, yesOrNo: Bool, count: Int, longCount: Int64, amount: Double, templates: [TRTemplate], name: String, success: (TRTemplate) -> Void, failure: ((NSError) -> Void)? = nil ) {
    
        var params = [String: AnyObject]()
        params["template"]  = template.toJSON()
        params["yesOrNo"]   = yesOrNo
        params["count"]     = count
        params["longCount"] = NSNumber(longLong: longCount)
        params["templates"] = templates.toJSON()
        
        let api = "Example.UserPostTemplate"
        
        debugPrint("api", " req: ", params)
        
        AreaService.current?.JSRONPRCClient.invokeMethod(api, withParameters: params, success: { (operation, responseObject) -> Void in
            
            debugPrint(api, " resp: ", responseObject);
            success(TRTemplate(jsonObject: responseObject)!)
            
            }, failure: { (operation, error) -> Void in
                failure?(error)
        })
    }
    
    class func ReturnString(success: (String) -> Void, failure: ((NSError) -> Void)? = nil ) {
        
        let params = [String: AnyObject]()
        let api = "Example.ReturnString"
        
        debugPrint(api, " req: ", params)
        
        AreaService.current?.JSRONPRCClient.invokeMethod(api, withParameters: params, success: { (operation, responseObject) -> Void in
            
            debugPrint(api, " resp: ", responseObject);
            success(responseObject as? String ?? "")
            
            }, failure: { (operation, error) -> Void in
                failure?(error)
        })
    }
    
    class func ReturnInt(success: (Int) -> Void, failure: ((NSError) -> Void)? = nil ) {
        
        let params = [String: AnyObject]()
        let api = "Example.ReturnInt"
        
        debugPrint(api, " req: ", params)
        
        AreaService.current?.JSRONPRCClient.invokeMethod(api, withParameters: params, success: { (operation, responseObject) -> Void in
            
            debugPrint(api, " resp: ", responseObject);
            success(responseObject as? Int ?? 0)
            
            }, failure: { (operation, error) -> Void in
                failure?(error)
        })
    }
    
    class func ReturnBool(success: (Bool) -> Void, failure: ((NSError) -> Void)? = nil ) {
        
        let params = [String: AnyObject]()
        let api = "Example.ReturnBool"
        
        debugPrint(api, " req: ", params)
        
        AreaService.current?.JSRONPRCClient.invokeMethod(api, withParameters: params, success: { (operation, responseObject) -> Void in
            
            debugPrint(api, " resp: ", responseObject);
            success(responseObject as? Bool ?? false)
            
            }, failure: { (operation, error) -> Void in
                failure?(error)
        })
    }
    
    class func ReturnDouble(success: (Double) -> Void, failure: ((NSError) -> Void)? = nil ) {
        
        let params = [String: AnyObject]()
        let api = "Example.ReturnDouble"
        
        debugPrint(api, " req: ", params)
        
        AreaService.current?.JSRONPRCClient.invokeMethod(api, withParameters: params, success: { (operation, responseObject) -> Void in
            
            debugPrint(api, " resp: ", responseObject);
            success(responseObject as? Double ?? 0.0)
            
            }, failure: { (operation, error) -> Void in
                failure?(error)
        })
    }
    
    class func ReturnInt64(success: (Int64) -> Void, failure: ((NSError) -> Void)? = nil ) {
        
        let params = [String: AnyObject]()
        let api = "Example.ReturnInt64"
        
        debugPrint(api, " req: ", params)
        
        AreaService.current?.JSRONPRCClient.invokeMethod(api, withParameters: params, success: { (operation, responseObject) -> Void in
            
            debugPrint(api, " resp: ", responseObject);
            success(responseObject as? Int64 ?? 0)
            
            }, failure: { (operation, error) -> Void in
                failure?(error)
        })
    }
    
    class func ReturnList(success: ([TRTemplate]) -> Void, failure: ((NSError) -> Void)? = nil ) {
        
        let params = [String: AnyObject]()
        let api = "Example.ReturnList"
        
        debugPrint(api, " req: ", params)
        
        AreaService.current?.JSRONPRCClient.invokeMethod(api, withParameters: params, success: { (operation, responseObject) -> Void in
            
            debugPrint(api, " resp: ", responseObject);
            success([TRTemplate](jsonObject: responseObject) ?? [])
            
            }, failure: { (operation, error) -> Void in
                failure?(error)
        })
    }
    
}
{{end}}
