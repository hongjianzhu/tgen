package com.daigou.sg.webapi.order.processing;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.nio.charset.Charset;

public class ProcessingOrderService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private ProcessingOrderService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest UserGetProcessingOrderGroups(final int offset, final int limit, final Listener<java.util.ArrayList<TProcessingOrderGroup>> listener) {
        RpcResponse res = new RpcResponse(TProcessingOrderGroup.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("offset", offset);
        
        args.put("limit", limit);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ProcessingOrder/UserGetProcessingOrderGroups", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetProcessingOrdersByServiceType(final com.daigou.sg.webapi.common.TServiceType serviceType, final int offset, final int limit, final Listener<java.util.ArrayList<com.daigou.sg.webapi.common.TOrderSimple>> listener) {
        RpcResponse res = new RpcResponse(com.daigou.sg.webapi.common.TOrderSimple.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        int serviceTypeValue = ((com.daigou.sg.rpc.DeserializerEnum) serviceType).getValue();
        args.put("serviceType", serviceTypeValue);
        
        args.put("offset", offset);
        
        args.put("limit", limit);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ProcessingOrder/UserGetProcessingOrdersByServiceType", res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
