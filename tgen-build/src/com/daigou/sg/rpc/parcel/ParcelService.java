package com.daigou.sg.rpc.parcel;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class ParcelService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private ParcelService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest GetBuyForMeFeeByPackageIds(final java.util.ArrayList<Integer> packageId, final String deliveryMethod, final int voucherId, final String couponCode, final Listener<TArrangeDeliveryBill> listener) {
        RpcResponse res = new RpcResponse(TArrangeDeliveryBill.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(packageId);
        params.add(deliveryMethod);
        params.add(voucherId);
        params.add(couponCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.GetBuyForMeFeeByPackageIds");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserArrangeParcelDelivery(final String parcelNumber, final String recipient, final String phone, final String deliveryDate, final String timeSlot, final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(parcelNumber);
        params.add(recipient);
        params.add(phone);
        params.add(deliveryDate);
        params.add(timeSlot);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserArrangeParcelDelivery");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserFindForDelivery(final int offset, final int limit, final Listener<TParcelDetailInfo> listener) {
        RpcResponse res = new RpcResponse(TParcelDetailInfo.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserFindForDelivery");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetAcknowledgeParcels(final Listener<java.util.ArrayList<TParcelInfo>> listener) {
        RpcResponse res = new RpcResponse(TParcelInfo.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetAcknowledgeParcels");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetBuyForMeFeeByPackageIds(final java.util.ArrayList<Integer> packageId, final String deliveryMethod, final int voucherId, final String couponCode, final Listener<TArrangeDeliveryBill> listener) {
        RpcResponse res = new RpcResponse(TArrangeDeliveryBill.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(packageId);
        params.add(deliveryMethod);
        params.add(voucherId);
        params.add(couponCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetBuyForMeFeeByPackageIds");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCompletedPackageWithComment(final Listener<java.util.ArrayList<TCustomerComment>> listener) {
        RpcResponse res = new RpcResponse(TCustomerComment.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetCompletedPackageWithComment");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetDeliveryDates(final String parcelNumber, final String deliveryMethod, final int deliveryMethodId, final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(parcelNumber);
        params.add(deliveryMethod);
        params.add(deliveryMethodId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetDeliveryDates");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetDeliveryTimeSlots(final String parcelNumber, final String date, final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(parcelNumber);
        params.add(date);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetDeliveryTimeSlots");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetDeliveryTimeSlotsByDeliveryMethod(final String parcelNumber, final String deliveryMethod, final int deliveryMethodId, final String date, final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(parcelNumber);
        params.add(deliveryMethod);
        params.add(deliveryMethodId);
        params.add(date);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetDeliveryTimeSlotsByDeliveryMethod");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetInvoiceByPackageId(final int packageId, final Listener<TInvoiceInfo> listener) {
        RpcResponse res = new RpcResponse(TInvoiceInfo.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(packageId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetInvoiceByPackageId");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetParcel(final String parcelNumber, final Listener<TParcel> listener) {
        RpcResponse res = new RpcResponse(TParcel.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(parcelNumber);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetParcel");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetParcelByStatusCode(final String statusCode, final int offset, final int limit, final Listener<java.util.ArrayList<TParcelInfo>> listener) {
        RpcResponse res = new RpcResponse(TParcelInfo.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(statusCode);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetParcelByStatusCode");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetParcelDeliveryInfo(final String parcelNumber, final Listener<TParcelDeliveryInfo> listener) {
        RpcResponse res = new RpcResponse(TParcelDeliveryInfo.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(parcelNumber);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetParcelDeliveryInfo");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetParcelDeliveryInfoWithWeight(final String parcelNumber, final Listener<TParcelDeliveryInfoExt> listener) {
        RpcResponse res = new RpcResponse(TParcelDeliveryInfoExt.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(parcelNumber);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetParcelDeliveryInfoWithWeight");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetParcelDetail(final String packageNumber, final Listener<TPackageDetail> listener) {
        RpcResponse res = new RpcResponse(TPackageDetail.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(packageNumber);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetParcelDetail");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetParcelPendingPayment(final int offset, final int limit, final Listener<java.util.ArrayList<TShipment>> listener) {
        RpcResponse res = new RpcResponse(TShipment.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetParcelPendingPayment");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetParcelSummary(final Listener<java.util.ArrayList<TParcelSummaryItem>> listener) {
        RpcResponse res = new RpcResponse(TParcelSummaryItem.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetParcelSummary");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetParcelSummaryList(final int offset, final int limit, final Listener<java.util.ArrayList<TParcelSummary>> listener) {
        RpcResponse res = new RpcResponse(TParcelSummary.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetParcelSummaryList");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetPendingCollectionParcel(final int offset, final int limit, final Listener<java.util.ArrayList<TShipment>> listener) {
        RpcResponse res = new RpcResponse(TShipment.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserGetPendingCollectionParcel");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSaveAcknowledge(final java.util.ArrayList<Integer> packageIds, final String level, final String subject, final String comment, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(packageIds);
        params.add(level);
        params.add(subject);
        params.add(comment);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Parcel.UserSaveAcknowledge");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
