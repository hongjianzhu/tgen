package com.daigou.sg.rpc.customer;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class UserService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private UserService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest BoLogin(final String CustomerName, final String Password, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(CustomerName);
        params.add(Password);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.BoLogin");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest ChangePassword(final String oldPassword, final String newPassword, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(oldPassword);
        params.add(newPassword);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.ChangePassword");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest CheckPassword(final String password, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(password);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.CheckPassword");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest FacebookOperation(final String operation, final String nickName, final String email, final String password, final String telephone, final String facebookId, final String facebookAccessToken, final String userHostAddress, final Listener<TCustomer> listener) {
        RpcResponse res = new RpcResponse(TCustomer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(operation);
        params.add(nickName);
        params.add(email);
        params.add(password);
        params.add(telephone);
        params.add(facebookId);
        params.add(facebookAccessToken);
        params.add(userHostAddress);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.FacebookOperation");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest ForgetPassword(final String nickName, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(nickName);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.ForgetPassword");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetCreditHistory(final Listener<java.util.ArrayList<TCreditItem>> listener) {
        RpcResponse res = new RpcResponse(TCreditItem.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.GetCreditHistory");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetCustomer(final Listener<TCustomer> listener) {
        RpcResponse res = new RpcResponse(TCustomer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.GetCustomer");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest Login(final String nickName, final String password, final Listener<TCustomer> listener) {
        RpcResponse res = new RpcResponse(TCustomer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(nickName);
        params.add(password);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.Login");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest LoginByFacebook(final String facebookId, final String facebookAccessToken, final Listener<TCustomer> listener) {
        RpcResponse res = new RpcResponse(TCustomer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(facebookId);
        params.add(facebookAccessToken);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.LoginByFacebook");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest LoginForWeb(final String FacebookId, final String FacebookAccessToken, final String CustomerNickName, final String Password, final String RedirectUrl, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(FacebookId);
        params.add(FacebookAccessToken);
        params.add(CustomerNickName);
        params.add(Password);
        params.add(RedirectUrl);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.LoginForWeb");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest Logout(final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.Logout");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest Register(final String nickName, final String email, final String password, final String telephone, final String userHostAddress, final Listener<TCustomer> listener) {
        RpcResponse res = new RpcResponse(TCustomer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(nickName);
        params.add(email);
        params.add(password);
        params.add(telephone);
        params.add(userHostAddress);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.Register");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UpdateDefaultSetting(final TCustomerDefaultInfo customerDefaultInfo, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(customerDefaultInfo);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UpdateDefaultSetting");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UploadHeadPortraits(final String headPortraitsUrl, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(headPortraitsUrl);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UploadHeadPortraits");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserCustomerFavouriteOperate(final String Operate, final String AgentProductIds, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(Operate);
        params.add(AgentProductIds);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserCustomerFavouriteOperate");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserCustomizedCurrencyDisplayMode(final String DisplayMode, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(DisplayMode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserCustomizedCurrencyDisplayMode");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserCustomizedNightMode(final boolean IsUseNightMode, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(IsUseNightMode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserCustomizedNightMode");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserCustomizedProductCategory(final int ProductCategoryId, final boolean IsShow, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(ProductCategoryId);
        params.add(IsShow);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserCustomizedProductCategory");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserFindVoucherByCustomer(final Listener<java.util.ArrayList<TVoucher>> listener) {
        RpcResponse res = new RpcResponse(TVoucher.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserFindVoucherByCustomer");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetBanners(final String identifier, final Listener<java.util.ArrayList<TBannerGroup>> listener) {
        RpcResponse res = new RpcResponse(TBannerGroup.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(identifier);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserGetBanners");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCreditSummary(final Listener<TCustomerCreditSummary> listener) {
        RpcResponse res = new RpcResponse(TCustomerCreditSummary.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserGetCreditSummary");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCreditVouchers(final Listener<TCreditAndVouchers> listener) {
        RpcResponse res = new RpcResponse(TCreditAndVouchers.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserGetCreditVouchers");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCustomerCreditHistory(final int offset, final int limit, final Listener<java.util.ArrayList<TCustomerCredit>> listener) {
        RpcResponse res = new RpcResponse(TCustomerCredit.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserGetCustomerCreditHistory");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCustomerDefaultValues(final Listener<TCustomerDefaultInfo> listener) {
        RpcResponse res = new RpcResponse(TCustomerDefaultInfo.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserGetCustomerDefaultValues");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCustomerFavourite(final int PageIndex, final int PageSize, final Listener<java.util.ArrayList<TFavoritesItem>> listener) {
        RpcResponse res = new RpcResponse(TFavoritesItem.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(PageIndex);
        params.add(PageSize);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserGetCustomerFavourite");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCustomerProductCategories(final boolean IsLogined, final String originCode, final Listener<java.util.ArrayList<TProductCategory>> listener) {
        RpcResponse res = new RpcResponse(TProductCategory.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(IsLogined);
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserGetCustomerProductCategories");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCustomerRemindInfo(final Listener<TCustomerRemindInfo> listener) {
        RpcResponse res = new RpcResponse(TCustomerRemindInfo.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserGetCustomerRemindInfo");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserRenewSession(final String sessionId, final Listener<TRenewSessionResult> listener) {
        RpcResponse res = new RpcResponse(TRenewSessionResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(sessionId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserRenewSession");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSetCustomerComment(final int commentId, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(commentId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserSetCustomerComment");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserUpdateCustomerDefaultSetting(final String Telephone, final String NotificationEmail, final boolean EZShipping, final String DefaultLanguage, final boolean NewsLetter, final boolean Notification, final String Sex, final String BirthDate, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(Telephone);
        params.add(NotificationEmail);
        params.add(EZShipping);
        params.add(DefaultLanguage);
        params.add(NewsLetter);
        params.add(Notification);
        params.add(Sex);
        params.add(BirthDate);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserUpdateCustomerDefaultSetting");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserUpdateCustomerDefaultShippingMethod(final String OriginCode, final int ShipmentTypeId, final String WarehouseCode, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(OriginCode);
        params.add(ShipmentTypeId);
        params.add(WarehouseCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserUpdateCustomerDefaultShippingMethod");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserUpdateCustomerDeviceToken(final String deviceId, final String deviceInfo, final String deviceToken, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(deviceId);
        params.add(deviceInfo);
        params.add(deviceToken);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserUpdateCustomerDeviceToken");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserUploadHeadPortraits(final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "User.UserUploadHeadPortraits");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
