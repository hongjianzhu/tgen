package com.daigou.sg.rpc.enquiry;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class EnquiryService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private EnquiryService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest GetServiceTypes(final Listener<java.util.ArrayList<TEnquiryServiceType>> listener) {
        RpcResponse res = new RpcResponse(TEnquiryServiceType.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Enquiry.GetServiceTypes");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserAddNewEnquiryItem(final TEnquiryItem enquiryItem, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(enquiryItem);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Enquiry.UserAddNewEnquiryItem");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserDeleteEnquiry(final int enquiryId, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(enquiryId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Enquiry.UserDeleteEnquiry");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserDeleteEnquiryItem(final int enquiryItemId, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(enquiryItemId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Enquiry.UserDeleteEnquiryItem");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetEnquiries(final int enquiryId, final Listener<java.util.ArrayList<TEnquiryDetail>> listener) {
        RpcResponse res = new RpcResponse(TEnquiryDetail.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(enquiryId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Enquiry.UserGetEnquiries");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetEnquiriesList(final int pageIndex, final int pageSize, final boolean isCompleted, final Listener<TEnquiryDetailInfo> listener) {
        RpcResponse res = new RpcResponse(TEnquiryDetailInfo.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(pageIndex);
        params.add(pageSize);
        params.add(isCompleted);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Enquiry.UserGetEnquiriesList");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetEnquiryCategories(final Listener<TEnquiryCategoryInfo> listener) {
        RpcResponse res = new RpcResponse(TEnquiryCategoryInfo.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Enquiry.UserGetEnquiryCategories");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserResolveEnquiry(final int enquiryId, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(enquiryId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Enquiry.UserResolveEnquiry");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSaveEnquiries(final TEnquiry enquiry, final int parentId, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(enquiry);
        params.add(parentId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Enquiry.UserSaveEnquiries");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSetEnquiryView(final int enquiryId, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(enquiryId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Enquiry.UserSetEnquiryView");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
