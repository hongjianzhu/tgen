package com.daigou.sg.rpc.checkout;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class CheckoutService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private CheckoutService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest GetDeliveryMethods(final Listener<java.util.ArrayList<TDeliveryMethod>> listener) {
        RpcResponse res = new RpcResponse(TDeliveryMethod.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.GetDeliveryMethods");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetDeliveryMethodsByOrigin(final String originCode, final Listener<java.util.ArrayList<TDeliveryMethod>> listener) {
        RpcResponse res = new RpcResponse(TDeliveryMethod.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.GetDeliveryMethodsByOrigin");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetDeliverySubMethods(final String deliveryMethodCode, final Listener<java.util.ArrayList<TDeliveryMethod>> listener) {
        RpcResponse res = new RpcResponse(TDeliveryMethod.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(deliveryMethodCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.GetDeliverySubMethods");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserCancelPayments(final java.util.ArrayList<Integer> paymentIds, final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(paymentIds);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserCancelPayments");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserCartCheckout(final TCartCheckoutInfo checkoutInfo, final Listener<TCheckoutResult> listener) {
        RpcResponse res = new RpcResponse(TCheckoutResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(checkoutInfo);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserCartCheckout");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCartBill(final String checkoutType, final String originCode, final String shippingMethod, final String deliveryMethod, final int deliveryMethodId, final boolean insured, final int credit, final String couponCode, final String warehouse, final Listener<TCartBill> listener) {
        RpcResponse res = new RpcResponse(TCartBill.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(checkoutType);
        params.add(originCode);
        params.add(shippingMethod);
        params.add(deliveryMethod);
        params.add(deliveryMethodId);
        params.add(insured);
        params.add(credit);
        params.add(couponCode);
        params.add(warehouse);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetCartBill");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCartCheckoutBill(final String checkoutType, final String originCode, final String shippingMethod, final String deliveryMethod, final int deliveryMethodId, final boolean insured, final int credit, final String couponCode, final Listener<TCartBill> listener) {
        RpcResponse res = new RpcResponse(TCartBill.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(checkoutType);
        params.add(originCode);
        params.add(shippingMethod);
        params.add(deliveryMethod);
        params.add(deliveryMethodId);
        params.add(insured);
        params.add(credit);
        params.add(couponCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetCartCheckoutBill");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCartShippingMethods(final String originCode, final Listener<TCartShippingMethodResult> listener) {
        RpcResponse res = new RpcResponse(TCartShippingMethodResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetCartShippingMethods");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCheckoutForm(final String originCode, final Listener<TCheckoutForm> listener) {
        RpcResponse res = new RpcResponse(TCheckoutForm.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetCheckoutForm");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCheckoutVouchers(final java.util.ArrayList<String> selectedCodes, final TCartCheckoutInfo info, final Listener<java.util.ArrayList<TCheckoutVoucherGroup>> listener) {
        RpcResponse res = new RpcResponse(TCheckoutVoucherGroup.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(selectedCodes);
        params.add(info);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetCheckoutVouchers");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetDeliveryMethodsByParcel(final String parcelNumber, final Listener<java.util.ArrayList<TDeliveryMethod>> listener) {
        RpcResponse res = new RpcResponse(TDeliveryMethod.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(parcelNumber);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetDeliveryMethodsByParcel");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetGroupBuyBill(final TGroupBuyCheckoutInfo info, final Listener<TCartBill> listener) {
        RpcResponse res = new RpcResponse(TCartBill.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(info);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetGroupBuyBill");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetPrimeCartBill(final String deliveryMethod, final String deliveryMethodId, final Listener<TCartBill> listener) {
        RpcResponse res = new RpcResponse(TCartBill.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(deliveryMethod);
        params.add(deliveryMethodId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetPrimeCartBill");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetPrimeCheckoutForm(final Listener<TCheckoutForm> listener) {
        RpcResponse res = new RpcResponse(TCheckoutForm.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetPrimeCheckoutForm");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetPrimeCheckoutVouchers(final java.util.ArrayList<String> selectedCodes, final TPrimeCartCheckoutInfo info, final Listener<java.util.ArrayList<TCheckoutVoucherGroup>> listener) {
        RpcResponse res = new RpcResponse(TCheckoutVoucherGroup.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(selectedCodes);
        params.add(info);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetPrimeCheckoutVouchers");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetRecentDeliveryAddresses(final Listener<java.util.ArrayList<TDeliveryAddress>> listener) {
        RpcResponse res = new RpcResponse(TDeliveryAddress.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGetRecentDeliveryAddresses");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGroupBuyCheckout(final TGroupBuyCheckoutInfo info, final Listener<TCheckoutResult> listener) {
        RpcResponse res = new RpcResponse(TCheckoutResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(info);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserGroupBuyCheckout");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserIDDokuTopup(final double amount, final String telephone, final String paymentNumbers, final Listener<TTopupResult> listener) {
        RpcResponse res = new RpcResponse(TTopupResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(amount);
        params.add(telephone);
        params.add(paymentNumbers);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserIDDokuTopup");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserNewGetPrimeCartBill(final TPrimeCartCheckoutInfo checkoutInfo, final Listener<TCartBill> listener) {
        RpcResponse res = new RpcResponse(TCartBill.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(checkoutInfo);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserNewGetPrimeCartBill");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserPaypalTopup(final double amount, final String telephone, final String paymentNumbers, final Listener<TTopupResult> listener) {
        RpcResponse res = new RpcResponse(TTopupResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(amount);
        params.add(telephone);
        params.add(paymentNumbers);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserPaypalTopup");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserPrimeCartCheckout(final TPrimeCartCheckoutInfo checkoutInfo, final Listener<TCheckoutResult> listener) {
        RpcResponse res = new RpcResponse(TCheckoutResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(checkoutInfo);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserPrimeCartCheckout");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserReArrangeDelivery(final TReArrangeDeliveryInfo rearrangeInfo, final Listener<TReArrangeDeliveryResult> listener) {
        RpcResponse res = new RpcResponse(TReArrangeDeliveryResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(rearrangeInfo);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserReArrangeDelivery");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserReddotEbankingTopup(final double amount, final String telephone, final String paymentNumbers, final Listener<TTopupResult> listener) {
        RpcResponse res = new RpcResponse(TTopupResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(amount);
        params.add(telephone);
        params.add(paymentNumbers);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserReddotEbankingTopup");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserReddotTopup(final double amount, final String telephone, final String paymentNumbers, final Listener<TTopupResult> listener) {
        RpcResponse res = new RpcResponse(TTopupResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(amount);
        params.add(telephone);
        params.add(paymentNumbers);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserReddotTopup");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserToggleCartItem(final String originCode, final java.util.ArrayList<Integer> cartItemIds, final boolean selected, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);
        params.add(cartItemIds);
        params.add(selected);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserToggleCartItem");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserToggleCartItemAndGetShippingMethods(final String originCode, final java.util.ArrayList<Integer> cartItemIds, final boolean selected, final Listener<TCartShippingMethodResult> listener) {
        RpcResponse res = new RpcResponse(TCartShippingMethodResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);
        params.add(cartItemIds);
        params.add(selected);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Checkout.UserToggleCartItemAndGetShippingMethods");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
