package com.daigou.sg.webapi.payment.pending;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.nio.charset.Charset;

public class PendingPaymentService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private PendingPaymentService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest UserCancelPendingPayments(final java.util.ArrayList<Integer> paymentIDs, final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("paymentIDs", paymentIDs);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "PendingPayment/UserCancelPendingPayments", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetPendingPaymentDetail(final int paymentID, final Listener<TPaymentDetail> listener) {
        RpcResponse res = new RpcResponse(TPaymentDetail.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("paymentID", paymentID);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "PendingPayment/UserGetPendingPaymentDetail", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetPendingPayments(final int offset, final int limit, final Listener<TPendingPaymentResult> listener) {
        RpcResponse res = new RpcResponse(TPendingPaymentResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("offset", offset);
        
        args.put("limit", limit);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "PendingPayment/UserGetPendingPayments", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserPayPendingPayments(final java.util.ArrayList<Integer> paymentIDs, final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("paymentIDs", paymentIDs);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "PendingPayment/UserPayPendingPayments", res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
