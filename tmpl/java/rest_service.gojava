package {{ .BaseJava.Namespace }};

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response.Listener;
import com.daigou.model.GsonUtils;
import com.daigou.model.RpcRequest;
import com.daigou.model.RpcResponse;
import com.daigou.model.TRpc;
import com.google.gson.Gson;

import java.nio.charset.Charset;

{{ $js := . -}}
public class {{ .Service.Name}}Service {
    private static final Gson gson = GsonUtils.getGsonInstance();

    private {{ .Service.Name}}Service() {
        // Constructor hidden because this is a singleton
    }

{{ range $k, $method := $.Service.Methods }}
    public static RpcRequest {{ $method.Name }}({{ $method | $js.BaseJava.AssembleParams }}) {
        String path = "{{ $js.Service.Name }}/{{ $method.Name }}";
        {{- if $method.ReturnType }}
        {{- if eq $method.ReturnType.Name "string" }}
        RpcResponse res = new RpcResponse(path, String.class, listener,false,false);
        {{- else if eq $method.ReturnType.Name "bool" }}
        RpcResponse res = new RpcResponse(path, Boolean.class, listener,false,false);
        {{- else if eq $method.ReturnType.Name "i16" }}
        RpcResponse res = new RpcResponse(path, Short.class, listener,false,false);
        {{- else if eq $method.ReturnType.Name "i32" }}
        RpcResponse res = new RpcResponse(path, Integer.class, listener,false,false);
        {{- else if eq $method.ReturnType.Name "i64" }}
        RpcResponse res = new RpcResponse(path, Long.class, listener,false,false);
        {{- else if eq $method.ReturnType.Name "double" }}
        RpcResponse res = new RpcResponse(path, Double.class, listener,false,flase);
        {{- else if or (eq $method.ReturnType.Name "set") (eq $method.ReturnType.Name "list") }}
        RpcResponse res = new RpcResponse(path, {{ $method.ReturnType | $js.BaseJava.GetInnerType }}.class, listener, true,false);
        {{- else if eq $method.ReturnType.Name "map" }}
        <!-- map is ignored -->
        {{- else }}
        RpcResponse res = new RpcResponse(path, {{ $method.ReturnType | $js.BaseJava.GetInnerType }}.class, listener,false,false);
        {{- end }}
        {{- else }}
        RpcResponse res = new RpcResponse(path, null, listener,false,false);
        {{- end }}
        {{- if $method.Arguments }}
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        {{- range $arg := $method.Arguments }}
        {{$fieldname := $js.FilterVariableName $arg.Name}}
        {{- if $js.BaseJava.IsEnum $arg.Type}}
        int {{$fieldname}}Value = ((com.daigou.model.DeserializerEnum) {{$fieldname}}).getValue();
        args.put("{{ $fieldname }}", {{ $fieldname }}Value);
        {{- else}}
        args.put("{{ $fieldname }}", {{ $fieldname }});
        {{- end}}
        {{- end }}
        {{- else }}
        java.util.HashMap<String, Object> args = null;
        {{- end }}
        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getInstance().getWebApiUrl() + path, res, args);
        TRpc.getInstance().getQueue().add(req);
        return req;
    }
{{ end -}}

}
