package com.daigou.sg.rpc.my.customer;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class MYShipmentService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private MYShipmentService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest GetCollectionMethods(final Listener<java.util.ArrayList<TMYCollectionMethod>> listener) {
        RpcResponse res = new RpcResponse(TMYCollectionMethod.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.GetCollectionMethods");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetCollectionMethodsByOrigin(final String originCode, final Listener<java.util.ArrayList<TMYCollectionMethod>> listener) {
        RpcResponse res = new RpcResponse(TMYCollectionMethod.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.GetCollectionMethodsByOrigin");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetCollectionSubMethods(final String deliveryMethodCode, final Listener<java.util.ArrayList<TMYCollectionMethod>> listener) {
        RpcResponse res = new RpcResponse(TMYCollectionMethod.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(deliveryMethodCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.GetCollectionSubMethods");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetStationTimes(final int stationId, final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(stationId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.GetStationTimes");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetArrivedOrders(final String shipmentTypeCode, final String originCode, final String warehouseCode, final Listener<java.util.ArrayList<TArrivedOrder>> listener) {
        RpcResponse res = new RpcResponse(TArrivedOrder.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(shipmentTypeCode);
        params.add(originCode);
        params.add(warehouseCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.UserGetArrivedOrders");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetArrivedOrdersBill(final java.util.ArrayList<Integer> orderIds, final String shipmentTypeCode, final String originCode, final String warehouseCode, final String localDeliveryMethod, final int customerAddressId, final int stationId, final String coupon, final int credit, final Listener<TArrivedBill> listener) {
        RpcResponse res = new RpcResponse(TArrivedBill.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(orderIds);
        params.add(shipmentTypeCode);
        params.add(originCode);
        params.add(warehouseCode);
        params.add(localDeliveryMethod);
        params.add(customerAddressId);
        params.add(stationId);
        params.add(coupon);
        params.add(credit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.UserGetArrivedOrdersBill");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetCredits(final Listener<java.util.ArrayList<TCredit>> listener) {
        RpcResponse res = new RpcResponse(TCredit.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.UserGetCredits");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetMYShipForMeArrivedOrders(final String shipmentTypeCode, final String originCode, final String warehouseCode, final Listener<java.util.ArrayList<TArrivedOrder>> listener) {
        RpcResponse res = new RpcResponse(TArrivedOrder.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(shipmentTypeCode);
        params.add(originCode);
        params.add(warehouseCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.UserGetMYShipForMeArrivedOrders");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetMYShipForMeArrivedOrdersBill(final java.util.ArrayList<Integer> orderIds, final String shipmentTypeCode, final String originCode, final String warehouseCode, final String localDeliveryMethod, final int customerAddressId, final int stationId, final String coupon, final int credit, final boolean insurance, final Listener<TArrivedBill> listener) {
        RpcResponse res = new RpcResponse(TArrivedBill.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(orderIds);
        params.add(shipmentTypeCode);
        params.add(originCode);
        params.add(warehouseCode);
        params.add(localDeliveryMethod);
        params.add(customerAddressId);
        params.add(stationId);
        params.add(coupon);
        params.add(credit);
        params.add(insurance);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.UserGetMYShipForMeArrivedOrdersBill");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetPackageLogisticsStatus(final int packageId, final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(packageId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.UserGetPackageLogisticsStatus");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSubmitMYShipForMeShipment(final TSubmitParcel submitParcel, final Listener<TCreatedPaymentBillStatus> listener) {
        RpcResponse res = new RpcResponse(TCreatedPaymentBillStatus.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(submitParcel);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.UserSubmitMYShipForMeShipment");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSubmitShipment(final TSubmitParcel submitParcel, final Listener<TCreatedPaymentBillStatus> listener) {
        RpcResponse res = new RpcResponse(TCreatedPaymentBillStatus.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(submitParcel);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "MYShipment.UserSubmitShipment");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
