{{define "echo_module"}}package {{.Package}}{{$utils := .TplUtils}}{{$serviceName := $utils.UpperHead .Service.Name}}

import (
    "net/http"

    "github.com/ezbuy/utils/httputils/echoutils"
    "gopkg.in/labstack/echo.v1"
)

func Register{{$serviceName}}ServiceAPIModule(mux *echo.Group, service Echo{{$serviceName}}Service) {
    mod := &{{$serviceName}}ServiceAPIModule{
        service: service,
    }

    group := mux.Group("/{{$serviceName}}")
    {{- range $method := .Service.Methods}}
    group.Post("/{{$utils.UpperHead $method.Name}}", mod.{{$utils.UpperHead $method.Name}})
    {{- end}}
}

type {{$serviceName}}ServiceAPIModule struct {
    service Echo{{$serviceName}}Service
}

{{range $method := .Service.Methods}}{{$methodName := $utils.UpperHead $method.Name}}{{$noReturn := $utils.IsNilType $method.ReturnType}}
func (this *{{$serviceName}}ServiceAPIModule) {{$methodName}}(c *echo.Context) error {
    {{- $argsCount := len $method.Arguments}}
    {{- if ne $argsCount 0}}
    params := &Request{{$serviceName}}Service{{$methodName}}Arguments{}

    if err := echoutils.DecodeJSONInput(c, params); err != nil {
        return err
    }
    {{end}}
    resp := &EchoResponse{{$serviceName}}Service{{$methodName}}{}
    err := this.service.{{$methodName}}(c, resp, {{$utils.GenWebApiServiceParams $method.Arguments}})
    
    if err != nil {
        echoutils.RequestLogger(c).Infof("service error: %s", err)
        return echoutils.InternalError
    }

    if resp.HTTPError != nil {
        return resp.HTTPError
    }

    return c.JSON(http.StatusOK, {{if not $noReturn}}resp.Result{{else}}echoutils.OKMessage{{end}})
}
{{end}}
{{end}}
