package com.daigou.sg.webapi.readytoship;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.nio.charset.Charset;

public class ReadyToShipService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private ReadyToShipService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest UserGetBuy4MeDeliveryMethods(final TBuy4MeCheckoutInfo info, final Listener<java.util.ArrayList<com.daigou.sg.rpc.checkout.TDeliveryMethod>> listener) {
        RpcResponse res = new RpcResponse(com.daigou.sg.rpc.checkout.TDeliveryMethod.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetBuy4MeDeliveryMethods", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetBuy4MeItemsBills(final TBuy4MeCheckoutInfo info, final Listener<com.daigou.sg.rpc.checkout.TCartBill> listener) {
        RpcResponse res = new RpcResponse(com.daigou.sg.rpc.checkout.TCartBill.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetBuy4MeItemsBills", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetBuy4MeItemsDates(final TBuy4MeCheckoutInfo info, final String deliveryMethod, final int deliveryMethodId, final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);
        
        args.put("deliveryMethod", deliveryMethod);
        
        args.put("deliveryMethodId", deliveryMethodId);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetBuy4MeItemsDates", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetBuy4MeItemsDeliveryTimeSlots(final TBuy4MeCheckoutInfo info, final String deliveryMethod, final int deliveryMethodId, final String date, final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);
        
        args.put("deliveryMethod", deliveryMethod);
        
        args.put("deliveryMethodId", deliveryMethodId);
        
        args.put("date", date);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetBuy4MeItemsDeliveryTimeSlots", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetReadyToShipGroups(final int offset, final int limit, final Listener<java.util.ArrayList<TReadyToShipGroup>> listener) {
        RpcResponse res = new RpcResponse(TReadyToShipGroup.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("offset", offset);
        
        args.put("limit", limit);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetReadyToShipGroups", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetReadyToShipItems(final com.daigou.sg.webapi.common.TServiceType serviceType, final String warehouseCode, final String shippingMethodCode, final int offset, final int limit, final Listener<java.util.ArrayList<TReadyToShipOrderItem>> listener) {
        RpcResponse res = new RpcResponse(TReadyToShipOrderItem.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        int serviceTypeValue = ((com.daigou.sg.rpc.DeserializerEnum) serviceType).getValue();
        args.put("serviceType", serviceTypeValue);
        
        args.put("warehouseCode", warehouseCode);
        
        args.put("shippingMethodCode", shippingMethodCode);
        
        args.put("offset", offset);
        
        args.put("limit", limit);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetReadyToShipItems", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetShip4MeDeliveryMethods(final TShip4MeCheckoutInfo info, final Listener<java.util.ArrayList<com.daigou.sg.rpc.checkout.TDeliveryMethod>> listener) {
        RpcResponse res = new RpcResponse(com.daigou.sg.rpc.checkout.TDeliveryMethod.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetShip4MeDeliveryMethods", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetShip4MeItemsBills(final TShip4MeCheckoutInfo info, final Listener<com.daigou.sg.rpc.checkout.TCartBill> listener) {
        RpcResponse res = new RpcResponse(com.daigou.sg.rpc.checkout.TCartBill.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetShip4MeItemsBills", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetShip4MeItemsDates(final TShip4MeCheckoutInfo info, final String deliveryMethod, final int deliveryMethodId, final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);
        
        args.put("deliveryMethod", deliveryMethod);
        
        args.put("deliveryMethodId", deliveryMethodId);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetShip4MeItemsDates", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetShip4MeItemsDeliveryTimeSlots(final TShip4MeCheckoutInfo info, final String deliveryMethod, final int deliveryMethodId, final String date, final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);
        
        args.put("deliveryMethod", deliveryMethod);
        
        args.put("deliveryMethodId", deliveryMethodId);
        
        args.put("date", date);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetShip4MeItemsDeliveryTimeSlots", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetShip4MeShippingMethods(final TShip4MeCheckoutInfo info, final Listener<java.util.ArrayList<com.daigou.sg.rpc.checkout.TCartShippingMethod>> listener) {
        RpcResponse res = new RpcResponse(com.daigou.sg.rpc.checkout.TCartShippingMethod.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserGetShip4MeShippingMethods", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSubmitBuy4MeItems(final TBuy4MeCheckoutInfo info, final boolean payNow, final Listener<com.daigou.sg.rpc.checkout.TCheckoutResult> listener) {
        RpcResponse res = new RpcResponse(com.daigou.sg.rpc.checkout.TCheckoutResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);
        
        args.put("payNow", payNow);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserSubmitBuy4MeItems", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSubmitShip4MeItems(final TShip4MeCheckoutInfo info, final boolean payNow, final Listener<com.daigou.sg.rpc.checkout.TCheckoutResult> listener) {
        RpcResponse res = new RpcResponse(com.daigou.sg.rpc.checkout.TCheckoutResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("info", info);
        
        args.put("payNow", payNow);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "ReadyToShip/UserSubmitShip4MeItems", res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
