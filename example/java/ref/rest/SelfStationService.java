package com.daigou.selfstation.rpc.selfstation;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */

import android.util.Log;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.selfstation.utils.JsonUtils;
import com.daigou.selfstation.utils.NetworkError;
import com.daigou.selfstation.utils.RpcRequest;
import com.daigou.selfstation.system.AppUrl;
import com.fasterxml.jackson.core.JsonParser;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;

public class SelfStationService {
    private static final Gson gson = new Gson();
    private static int msgID = 1;
    private static RequestQueue queue;

    private SelfStationService() {
        // Constructor hidden because this is a singleton
    }

    public static void init(RequestQueue requestQueue) {
        queue = requestQueue;
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static void Login(final String username, final String tPackage, final Listener<TLoginResult> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "SelfStation/Login",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TLoginResult result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TLoginResult.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("username", username);
                msg.put("tPackage", tPackage);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserFindParcel(final String stationName, final String date, final String userName, final String phone, final String parcelNumber, final int offset, final int limit, final Listener<ArrayList<TParcel>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "SelfStation/UserFindParcel",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<TParcel> result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TParcel.fromJSONArray(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("stationName", stationName);
                msg.put("date", date);
                msg.put("userName", userName);
                msg.put("phone", phone);
                msg.put("parcelNumber", parcelNumber);
                msg.put("offset", offset);
                msg.put("limit", limit);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserGetParcel(final String parcelNumber, final Listener<TParcel> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "SelfStation/UserGetParcel",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TParcel result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TParcel.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("parcelNumber", parcelNumber);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserGetShelfNumbers(final String stationName, final Listener<ArrayList<String>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "SelfStation/UserGetShelfNumbers",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<String> result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = JsonUtils.readStringList(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("stationName", stationName);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserGetUploadToken(final Listener<String> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "SelfStation/UserGetUploadToken",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        String result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        jp.nextToken();
                        result = jp.getText();

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                return "".getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserListParcel(final String stationName, final String status, final int offset, final int limit, final Listener<ArrayList<TParcel>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "SelfStation/UserListParcel",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<TParcel> result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TParcel.fromJSONArray(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("stationName", stationName);
                msg.put("status", status);
                msg.put("offset", offset);
                msg.put("limit", limit);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserModifyPassword(final String currentPassword, final String newPassword, final Listener<String> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "SelfStation/UserModifyPassword",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        String result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        jp.nextToken();
                        result = jp.getText();

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("currentPassword", currentPassword);
                msg.put("newPassword", newPassword);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserPutParcelToShelf(final String shelfNumber, final String parcelNumber, final Listener<String> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "SelfStation/UserPutParcelToShelf",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        String result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        jp.nextToken();
                        result = jp.getText();

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("shelfNumber", shelfNumber);
                msg.put("parcelNumber", parcelNumber);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserSetParcelReceived(final String parcelNumber, final int rating, final String signatureImageKey, final Listener<String> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "SelfStation/UserSetParcelReceived",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        String result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        jp.nextToken();
                        result = jp.getText();

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("parcelNumber", parcelNumber);
                msg.put("rating", rating);
                msg.put("signatureImageKey", signatureImageKey);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }
}
