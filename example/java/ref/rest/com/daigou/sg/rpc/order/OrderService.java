package com.daigou.sg.rpc.order;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */

import android.util.Log;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.selfstation.utils.JsonUtils;
import com.daigou.selfstation.utils.NetworkError;
import com.daigou.selfstation.utils.RpcRequest;
import com.daigou.selfstation.system.AppUrl;
import com.fasterxml.jackson.core.JsonParser;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;

public class OrderService {
    private static final Gson gson = new Gson();
    private static int msgID = 1;
    private static RequestQueue queue;

    private OrderService() {
        // Constructor hidden because this is a singleton
    }

    public static void init(RequestQueue requestQueue) {
        queue = requestQueue;
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static void CancelOrder(final int orderId, final Listener<Void> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/CancelOrder",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {if (listener != null) {
                        listener.onResponse(true);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderId", orderId);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void GetArrivedOrderSummary(final String originCode, final String warehouseCode, final Listener<ArrayList<TArrivedOrderSummary>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/GetArrivedOrderSummary",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<TArrivedOrderSummary> result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TArrivedOrderSummary.fromJSONArray(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("originCode", originCode);
                msg.put("warehouseCode", warehouseCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void GetArrivedOrders(final String originCode, final String warehouseCode, final String shipmentTypeCode, final Listener<TReadyToShipSummary> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/GetArrivedOrders",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TReadyToShipSummary result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TReadyToShipSummary.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("originCode", originCode);
                msg.put("warehouseCode", warehouseCode);
                msg.put("shipmentTypeCode", shipmentTypeCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void GetOrderDetail(final int orderId, final Listener<TOrderDetail> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/GetOrderDetail",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TOrderDetail result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TOrderDetail.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderId", orderId);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void GetOrderListByStatus(final String originCode, final String orderStatus, final String warehouseCode, final Listener<ArrayList<TOrder>> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/GetOrderListByStatus",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        ArrayList<TOrder> result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TOrder.fromJSONArray(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("originCode", originCode);
                msg.put("orderStatus", orderStatus);
                msg.put("warehouseCode", warehouseCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void GetOrderSummary(final String originCode, final Listener<TOrderSummary> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/GetOrderSummary",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TOrderSummary result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TOrderSummary.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("originCode", originCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void PayForCheckOut(final boolean authorizeForBalance, final String originCode, final Listener<Integer> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/PayForCheckOut",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        Integer result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        jp.nextToken();
                        result = jp.getIntValue();

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("authorizeForBalance", authorizeForBalance);
                msg.put("originCode", originCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void ReplyOrderRemark(final int orderId, final int orderRemarkParentId, final String remark, final String pictures, final Listener<Void> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/ReplyOrderRemark",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {if (listener != null) {
                        listener.onResponse(true);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderId", orderId);
                msg.put("orderRemarkParentId", orderRemarkParentId);
                msg.put("remark", remark);
                msg.put("pictures", pictures);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UpdateOrder(final int orderId, final int shipmentTypeId, final String warehouseCode, final double internalShipmentFee, final boolean insured, final String productRemark, final Listener<Void> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/UpdateOrder",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {if (listener != null) {
                        listener.onResponse(true);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderId", orderId);
                msg.put("shipmentTypeId", shipmentTypeId);
                msg.put("warehouseCode", warehouseCode);
                msg.put("internalShipmentFee", internalShipmentFee);
                msg.put("insured", insured);
                msg.put("productRemark", productRemark);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserAddToCartByOrderId(final int orderId, final Listener<Void> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/UserAddToCartByOrderId",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {if (listener != null) {
                        listener.onResponse(true);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("orderId", orderId);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserChangeEZShipping(final boolean ezShipping, final Listener<TEzShipping> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/UserChangeEZShipping",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TEzShipping result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TEzShipping.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("ezShipping", ezShipping);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void UserGetEZShippingStatus(final Listener<TEzShipping> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/UserGetEZShippingStatus",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        TEzShipping result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        result = TEzShipping.fromJSON(jp);

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                return "".getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

    public static void WrapOrderToPackage(final String originCode, final String warehouseCode, final String shipmentTypeCode, final Listener<Integer> listener) {
        RpcRequest req = new RpcRequest(Request.Method.POST, AppUrl.kJsonRpcCoreUrl + "Order/WrapOrderToPackage",
            new Response.Listener<String>() {
                @Override
                public void onResponse(String response) {
                    try {
                        Integer result;
                        JsonParser jp = JsonUtils.getJsonRpcResult(response);
                        
                        jp.nextToken();
                        result = jp.getIntValue();

                        jp.close();

                        listener.onResponse(result);
                    } catch (IOException ex) {
                        Log.d("ex", ex.toString());
                        Log.d("jsonObject", response);
                        listener.onResponse(null);
                    }
                }
            }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (error.getCause() != null && error.getCause() instanceof java.net.UnknownHostException) {
                    NetworkError.unKnowHost();
                } else if (error.networkResponse != null) {
                    NetworkError.networkError(error.networkResponse.statusCode);
                } else {
                    listener.onResponse(null);
                }
            }
        }) {
            @Override
            public byte[] getBody() {
                HashMap<String, Object> msg = new HashMap<String, Object>();
                msg.put("originCode", originCode);
                msg.put("warehouseCode", warehouseCode);
                msg.put("shipmentTypeCode", shipmentTypeCode);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }
}
