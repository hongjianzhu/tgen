package com.daigou.sg.rpc.product;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class ProductService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private ProductService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest GetGroupBuyProductDetail(final String productUrl, final String groupbuyNo, final String purchaseSource, final Listener<TProductExtension> listener) {
        RpcResponse res = new RpcResponse(TProductExtension.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(productUrl);
        params.add(groupbuyNo);
        params.add(purchaseSource);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.GetGroupBuyProductDetail");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetHotSearch(final Listener<java.util.ArrayList<String>> listener) {
        RpcResponse res = new RpcResponse(String.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.GetHotSearch");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetPrimeProductDetail(final String productUrl, final String purchaseSource, final Listener<TProductExtension> listener) {
        RpcResponse res = new RpcResponse(TProductExtension.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(productUrl);
        params.add(purchaseSource);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.GetPrimeProductDetail");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetProductDetail(final String productUrl, final String purchaseSource, final Listener<TProduct> listener) {
        RpcResponse res = new RpcResponse(TProduct.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(productUrl);
        params.add(purchaseSource);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.GetProductDetail");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetReviewCount(final String productUrl, final Listener<TProductReviewCount> listener) {
        RpcResponse res = new RpcResponse(TProductReviewCount.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(productUrl);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.GetReviewCount");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetReviews(final String productUrl, final boolean hasPhoto, final int offset, final int limit, final Listener<java.util.ArrayList<TProductReviewDetail>> listener) {
        RpcResponse res = new RpcResponse(TProductReviewDetail.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(productUrl);
        params.add(hasPhoto);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.GetReviews");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest PrimeSearch(final String keyword, final java.util.ArrayList<SearchFilterCond> filters, final SearchSortCond sort, final int offset, final int limit, final Listener<SearchResult> listener) {
        RpcResponse res = new RpcResponse(SearchResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(keyword);
        params.add(filters);
        params.add(sort);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.PrimeSearch");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest Search(final String keyword, final java.util.ArrayList<SearchFilterCond> filters, final SearchSortCond sort, final int offset, final int limit, final Listener<SearchResult> listener) {
        RpcResponse res = new RpcResponse(SearchResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(keyword);
        params.add(filters);
        params.add(sort);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.Search");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest SearchByCategory(final int categoryId, final java.util.ArrayList<SearchFilterCond> filters, final SearchSortCond sort, final int offset, final int limit, final Listener<SearchResult> listener) {
        RpcResponse res = new RpcResponse(SearchResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(categoryId);
        params.add(filters);
        params.add(sort);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.SearchByCategory");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest SearchByCategoryAndKeyword(final int categoryId, final String keyword, final java.util.ArrayList<SearchFilterCond> filters, final SearchSortCond sort, final int offset, final int limit, final Listener<SearchResult> listener) {
        RpcResponse res = new RpcResponse(SearchResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(categoryId);
        params.add(keyword);
        params.add(filters);
        params.add(sort);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.SearchByCategoryAndKeyword");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest SearchByDomain(final String keyword, final String domain, final java.util.ArrayList<SearchFilterCond> filters, final SearchSortCond sort, final int offset, final int limit, final Listener<SearchResult> listener) {
        RpcResponse res = new RpcResponse(SearchResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(keyword);
        params.add(domain);
        params.add(filters);
        params.add(sort);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.SearchByDomain");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest SearchByPrimeCategory(final int categoryId, final java.util.ArrayList<SearchFilterCond> filters, final SearchSortCond sort, final int offset, final int limit, final Listener<SearchResult> listener) {
        RpcResponse res = new RpcResponse(SearchResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(categoryId);
        params.add(filters);
        params.add(sort);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.SearchByPrimeCategory");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest SearchByPrimeCategoryAndKeyword(final int categoryId, final String keyword, final java.util.ArrayList<SearchFilterCond> filters, final SearchSortCond sort, final int offset, final int limit, final Listener<SearchResult> listener) {
        RpcResponse res = new RpcResponse(SearchResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(categoryId);
        params.add(keyword);
        params.add(filters);
        params.add(sort);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.SearchByPrimeCategoryAndKeyword");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest SearchBySeller(final int sellerId, final String keyword, final java.util.ArrayList<SearchFilterCond> filters, final SearchSortCond sort, final int offset, final int limit, final Listener<SearchResult> listener) {
        RpcResponse res = new RpcResponse(SearchResult.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(sellerId);
        params.add(keyword);
        params.add(filters);
        params.add(sort);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.SearchBySeller");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest SetHelpful(final int productReviewDetailId, final boolean helpful, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(productReviewDetailId);
        params.add(helpful);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Product.SetHelpful");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
