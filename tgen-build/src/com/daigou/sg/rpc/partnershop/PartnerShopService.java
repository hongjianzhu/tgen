package com.daigou.sg.rpc.partnershop;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class PartnerShopService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private PartnerShopService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest GetHomePageSellers(final int offset, final int limit, final String originCode, final Listener<java.util.ArrayList<TSeller>> listener) {
        RpcResponse res = new RpcResponse(TSeller.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(offset);
        params.add(limit);
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "PartnerShop.GetHomePageSellers");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetNewHomePageSellers(final int offset, final int limit, final String originCode, final Listener<java.util.ArrayList<TSellerWithPics>> listener) {
        RpcResponse res = new RpcResponse(TSellerWithPics.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(offset);
        params.add(limit);
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "PartnerShop.GetNewHomePageSellers");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetNewSellerCategories(final String originCode, final Listener<java.util.ArrayList<TSellerCategoryNew>> listener) {
        RpcResponse res = new RpcResponse(TSellerCategoryNew.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "PartnerShop.GetNewSellerCategories");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetProductsBySeller(final int sellerId, final int offset, final int limit, final Listener<java.util.ArrayList<TSellerProduct>> listener) {
        RpcResponse res = new RpcResponse(TSellerProduct.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(sellerId);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "PartnerShop.GetProductsBySeller");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetSellerCategories(final String originCode, final Listener<java.util.ArrayList<TSellerCategory>> listener) {
        RpcResponse res = new RpcResponse(TSellerCategory.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "PartnerShop.GetSellerCategories");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetSellerProductsByCategory(final int sellerCategoryId, final String originCode, final int offset, final int limit, final Listener<java.util.ArrayList<TSellerWithProducts>> listener) {
        RpcResponse res = new RpcResponse(TSellerWithProducts.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(sellerCategoryId);
        params.add(originCode);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "PartnerShop.GetSellerProductsByCategory");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetSellerWithProductsByCategory(final int sellerCategoryId, final String originCode, final int offset, final int limit, final Listener<java.util.ArrayList<TSellerWithBannerAndProducts>> listener) {
        RpcResponse res = new RpcResponse(TSellerWithBannerAndProducts.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(sellerCategoryId);
        params.add(originCode);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "PartnerShop.GetSellerWithProductsByCategory");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetSellersByCategory(final int sellerCategoryId, final String originCode, final int offset, final int limit, final Listener<java.util.ArrayList<TSeller>> listener) {
        RpcResponse res = new RpcResponse(TSeller.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(sellerCategoryId);
        params.add(originCode);
        params.add(offset);
        params.add(limit);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "PartnerShop.GetSellersByCategory");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
