/**
 * This file is auto-generated by tgen
 * Don't change manually
 */

import Foundation
{{ $ss := . }}
class {{ .Service.Name }}Service: {{ if .Service.Extends }}{{ .Service.Extends | $ss.BaseSwift.LastComponentOfDotStr }}{{ else }}NSObject{{ end }} {
{{ range .Service.Methods }}
    class func {{ .Name }}({{ if .Arguments }}{{ .Arguments | $ss.BaseSwift.ParamsJoinedByComma }}, {{ end }}success: ({{ if .ReturnType }}{{ .ReturnType | $ss.BaseSwift.PlainType }}{{ else }}Void{{ end }}) -> Void, failure: ((NSError) -> Void)? = nil) {
        {{ if .Arguments -}}
        var params = [String: AnyObject]()
        {{- range .Arguments }}
        params["{{ .Name }}"] = {{ $ss.BaseSwift.AssignToDict .}}{{ end }}
{{ else -}}
        let params = [String: AnyObject]()
        {{- end }}
        let api = "{{ $ss.Service.Name }}.{{ .Name }}"

        debugPrint(api, " req: ", params)

        AreaService.current?.JSRONPRCClient.invokeMethod(api, withParameters: params, success: { (operation, responseObject) -> Void in
            debugPrint(api, " resp: ", responseObject)
            {{ if .ReturnType }}
            {{- $t := .ReturnType | $ss.BaseSwift.PlainType -}}
            {{- if eq .ReturnType.Name "list" }}
            {{- $innertype := $ss.BaseSwift.GetInnerType .ReturnType -}}
            {{- if $innertype | $ss.BaseSwift.IsBasicType }}
            success(jsonObject as? {{ $t }} ?? [])
            {{- else }}
            success({{ $t }}(jsonObject: responseObject) ?? [])
            {{- end }}
            {{- else }}
            {{- if eq $t "String" }}
            success(responseObject as? {{ $t }} ?? "")
            {{- else if or (eq $t "Int") (eq $t "Int64") }}
            success(responseObject as? {{ $t }} ?? 0)
            {{- else if eq $t "Double" }}
            success(responseObject as? {{ $t }} ?? 0.0)
            {{- else if eq $t "Bool" }}
            success(responseObject as? {{ $t }} ?? false)
            {{- else }}
            success({{ $t }}(jsonObject: responseObject)!)
            {{- end }}
            {{- end }}
            {{- else }}
            success()
            {{- end }}
            }, failure: { (operation, error) -> Void in
                failure?(error)
        })
    }
{{ end }}
}
