package com.daigou.sg.rpc.order;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class OrderService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private OrderService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest CancelOrder(final int orderId, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(orderId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.CancelOrder");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetArrivedOrderSummary(final String originCode, final String warehouseCode, final Listener<java.util.ArrayList<TArrivedOrderSummary>> listener) {
        RpcResponse res = new RpcResponse(TArrivedOrderSummary.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);
        params.add(warehouseCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.GetArrivedOrderSummary");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetArrivedOrders(final String originCode, final String warehouseCode, final String shipmentTypeCode, final Listener<TReadyToShipSummary> listener) {
        RpcResponse res = new RpcResponse(TReadyToShipSummary.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);
        params.add(warehouseCode);
        params.add(shipmentTypeCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.GetArrivedOrders");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetOrderDetail(final int orderId, final Listener<TOrderDetail> listener) {
        RpcResponse res = new RpcResponse(TOrderDetail.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(orderId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.GetOrderDetail");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetOrderListByStatus(final String originCode, final String orderStatus, final String warehouseCode, final Listener<java.util.ArrayList<TOrder>> listener) {
        RpcResponse res = new RpcResponse(TOrder.class, listener, true);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);
        params.add(orderStatus);
        params.add(warehouseCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.GetOrderListByStatus");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest GetOrderSummary(final String originCode, final Listener<TOrderSummary> listener) {
        RpcResponse res = new RpcResponse(TOrderSummary.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.GetOrderSummary");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest PayForCheckOut(final boolean authorizeForBalance, final String originCode, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(authorizeForBalance);
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.PayForCheckOut");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest ReplyOrderRemark(final int orderId, final int orderRemarkParentId, final String remark, final String pictures, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(orderId);
        params.add(orderRemarkParentId);
        params.add(remark);
        params.add(pictures);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.ReplyOrderRemark");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UpdateOrder(final int orderId, final int shipmentTypeId, final String warehouseCode, final double internalShipmentFee, final boolean insured, final String productRemark, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(orderId);
        params.add(shipmentTypeId);
        params.add(warehouseCode);
        params.add(internalShipmentFee);
        params.add(insured);
        params.add(productRemark);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.UpdateOrder");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserAddToCartByOrderId(final int orderId, final Listener<Void> listener) {
        RpcResponse res = new RpcResponse(null, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(orderId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.UserAddToCartByOrderId");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserChangeEZShipping(final boolean ezShipping, final Listener<TEzShipping> listener) {
        RpcResponse res = new RpcResponse(TEzShipping.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(ezShipping);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.UserChangeEZShipping");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetEZShippingStatus(final Listener<TEzShipping> listener) {
        RpcResponse res = new RpcResponse(TEzShipping.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.UserGetEZShippingStatus");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest WrapOrderToPackage(final String originCode, final String warehouseCode, final String shipmentTypeCode, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(originCode);
        params.add(warehouseCode);
        params.add(shipmentTypeCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Order.WrapOrderToPackage");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
