package com.daigou.sg.rpc.favorite;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.nio.charset.Charset;

public class FavoriteService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private FavoriteService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest UserAddNewFavoriteCategory(final String favoriteCategoryName, final Listener<TFavoriteResult> listener) {
        RpcResponse res = new RpcResponse(TFavoriteResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("favoriteCategoryName", favoriteCategoryName);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserAddNewFavoriteCategory", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserAddNewFavoriteItem(final com.daigou.sg.rpc.product.TProductExtension product, final Listener<TFavoriteResult> listener) {
        RpcResponse res = new RpcResponse(TFavoriteResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("product", product);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserAddNewFavoriteItem", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserDeleteFavoriteCategory(final int favoriteCategoryId, final Listener<TFavoriteResult> listener) {
        RpcResponse res = new RpcResponse(TFavoriteResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("favoriteCategoryId", favoriteCategoryId);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserDeleteFavoriteCategory", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserDeleteFavoriteItems(final java.util.ArrayList<String> favoriteProductUrls, final Listener<TFavoriteResult> listener) {
        RpcResponse res = new RpcResponse(TFavoriteResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("favoriteProductUrls", favoriteProductUrls);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserDeleteFavoriteItems", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserDeleteFavoriteItemsByCategoryId(final java.util.ArrayList<String> favoriteProductUrls, final int favoriteCategoryId, final Listener<TFavoriteResult> listener) {
        RpcResponse res = new RpcResponse(TFavoriteResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("favoriteProductUrls", favoriteProductUrls);
        
        args.put("favoriteCategoryId", favoriteCategoryId);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserDeleteFavoriteItemsByCategoryId", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetAllFavoriteCategory(final Listener<java.util.ArrayList<TFavoriteCategory>> listener) {
        RpcResponse res = new RpcResponse(TFavoriteCategory.class, listener, true,false);
        java.util.HashMap<String, Object> args = null;

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserGetAllFavoriteCategory", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetAllFavoriteItems(final int offset, final int limit, final Listener<java.util.ArrayList<TFavoriteItem>> listener) {
        RpcResponse res = new RpcResponse(TFavoriteItem.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("offset", offset);
        
        args.put("limit", limit);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserGetAllFavoriteItems", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetFavoriteItemsByCategoryId(final int offset, final int limit, final int favoriteCategoryId, final Listener<java.util.ArrayList<TFavoriteItem>> listener) {
        RpcResponse res = new RpcResponse(TFavoriteItem.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("offset", offset);
        
        args.put("limit", limit);
        
        args.put("favoriteCategoryId", favoriteCategoryId);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserGetFavoriteItemsByCategoryId", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserGetProductIsFavorite(final String productUrl, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("productUrl", productUrl);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserGetProductIsFavorite", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserMoveFavoriteItems(final java.util.ArrayList<String> favoriteProductUrls, final int newFavoriteCategoryId, final Listener<TFavoriteResult> listener) {
        RpcResponse res = new RpcResponse(TFavoriteResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("favoriteProductUrls", favoriteProductUrls);
        
        args.put("newFavoriteCategoryId", newFavoriteCategoryId);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserMoveFavoriteItems", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserUpdateFavoriteCategory(final TFavoriteCategory favoriteCategory, final Listener<TFavoriteResult> listener) {
        RpcResponse res = new RpcResponse(TFavoriteResult.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("favoriteCategory", favoriteCategory);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "Favorite/UserUpdateFavoriteCategory", res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
