package com.daigou.selfstation.rpc.selfstation;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.nio.charset.Charset;

public class D2DService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private D2DService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest UserAddRemark(final String jobId, final String remark, final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("jobId", jobId);
        
        args.put("remark", remark);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "D2D/UserAddRemark", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserFindDeliveryJobs(final TFilter filter, final Listener<java.util.ArrayList<TDeliveryJob>> listener) {
        RpcResponse res = new RpcResponse(TDeliveryJob.class, listener, true,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("filter", filter);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "D2D/UserFindDeliveryJobs", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSignParcelReceived(final String jobId, final String signatureImageKey, final int rating, final Listener<String> listener) {
        RpcResponse res = new RpcResponse(String.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("jobId", jobId);
        
        args.put("signatureImageKey", signatureImageKey);
        
        args.put("rating", rating);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "D2D/UserSignParcelReceived", res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserSyncLocation(final TLocation location, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener,false,false);
        java.util.HashMap<String, Object> args = new java.util.HashMap<String, Object>();
        
        args.put("location", location);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getWebApiUrl() + "D2D/UserSyncLocation", res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
