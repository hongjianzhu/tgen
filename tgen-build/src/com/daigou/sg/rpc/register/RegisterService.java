package com.daigou.sg.rpc.register;

/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.daigou.sg.rpc.BaseModule;
import com.daigou.sg.rpc.GsonUtils;
import com.daigou.sg.rpc.RpcRequest;
import com.daigou.sg.rpc.RpcResponse;
import com.daigou.sg.rpc.TRpc;
import com.google.gson.Gson;

import java.io.IOException;
import java.nio.charset.Charset;
public class RegisterService {
    private static final Gson gson = GsonUtils.getGsonInstance();
    private static int msgID = 1;

    private RegisterService() {
        // Constructor hidden because this is a singleton
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

    public static RpcRequest AddQRScanCount(final String identId, final String originCode, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(identId);
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.AddQRScanCount");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest NeedPhoneValidation(final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.NeedPhoneValidation");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest NewLandingUserAU(final String email, final String username, final String phone, final String code, final String password, final String knowUs, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(email);
        params.add(username);
        params.add(phone);
        params.add(code);
        params.add(password);
        params.add(knowUs);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.NewLandingUserAU");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest NewLandingUserMY(final String email, final String username, final String phone, final String code, final String password, final String knowUs, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(email);
        params.add(username);
        params.add(phone);
        params.add(code);
        params.add(password);
        params.add(knowUs);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.NewLandingUserMY");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest NewLandingUserSG(final String email, final String username, final String phone, final String code, final String password, final String knowUs, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(email);
        params.add(username);
        params.add(phone);
        params.add(code);
        params.add(password);
        params.add(knowUs);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.NewLandingUserSG");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest NewQRUserMY(final String email, final String username, final String phone, final String code, final String password, final String knowUs, final String identId, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(email);
        params.add(username);
        params.add(phone);
        params.add(code);
        params.add(password);
        params.add(knowUs);
        params.add(identId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.NewQRUserMY");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest NewQRUserSG(final String email, final String username, final String phone, final String code, final String password, final String knowUs, final String identId, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(email);
        params.add(username);
        params.add(phone);
        params.add(code);
        params.add(password);
        params.add(knowUs);
        params.add(identId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.NewQRUserSG");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest NewRedPacketUserMY(final String email, final String username, final String phone, final String code, final String password, final String knowUs, final String identId, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(email);
        params.add(username);
        params.add(phone);
        params.add(code);
        params.add(password);
        params.add(knowUs);
        params.add(identId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.NewRedPacketUserMY");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest NewRedPacketUserSG(final String email, final String username, final String phone, final String code, final String password, final String knowUs, final String identId, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(email);
        params.add(username);
        params.add(phone);
        params.add(code);
        params.add(password);
        params.add(knowUs);
        params.add(identId);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.NewRedPacketUserSG");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest NewUserMY(final String email, final String username, final String phone, final String code, final String password, final String knowUs, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(email);
        params.add(username);
        params.add(phone);
        params.add(code);
        params.add(password);
        params.add(knowUs);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.NewUserMY");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest NewUserSG(final String email, final String username, final String phone, final String code, final String password, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(email);
        params.add(username);
        params.add(phone);
        params.add(code);
        params.add(password);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.NewUserSG");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest RedPacketShared(final String identId, final String redPacketOriginCode, final Listener<Boolean> listener) {
        RpcResponse res = new RpcResponse(Boolean.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(identId);
        params.add(redPacketOriginCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.RedPacketShared");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest RedPacketVerify(final String identId, final String phoneNumber, final String redPacketOriginCode, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(identId);
        params.add(phoneNumber);
        params.add(redPacketOriginCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.RedPacketVerify");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest SendCode(final String phone, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(phone);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.SendCode");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserRegisterScanQR(final String identId, final String area, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(identId);
        params.add(area);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.UserRegisterScanQR");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserScanQR(final String identId, final String originCode, final Listener<TUserScanQRStatus> listener) {
        RpcResponse res = new RpcResponse(TUserScanQRStatus.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(identId);
        params.add(originCode);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.UserScanQR");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest UserUpdateCustomerCoupon(final String coupon, final Listener<TUpdateUserCouponStatus> listener) {
        RpcResponse res = new RpcResponse(TUpdateUserCouponStatus.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(coupon);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.UserUpdateCustomerCoupon");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }

    public static RpcRequest ValidateInfo(final String email, final String username, final Listener<Integer> listener) {
        RpcResponse res = new RpcResponse(Integer.class, listener);

        final java.util.ArrayList<Object> params = new java.util.ArrayList<>();
        params.add(email);
        params.add(username);

        java.util.HashMap<String, Object> args = new java.util.HashMap<>();
        args.put("id", getMsgID());
        args.put("method", "Register.ValidateInfo");
        args.put("params", params);

        RpcRequest req = new RpcRequest(Request.Method.POST, TRpc.getJsonRpcUrl(), res, args);
        TRpc.getQueue().add(req);
        return req;
    }
}
